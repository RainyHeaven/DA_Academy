
이름 : 장훈

1. 다음 SELECT 문장에서 화면에 출력되는 컬럼이름은? 3번

  SELECT last_name "Name", salary as sal, salary*12 as "Annual Salary"
  FROM employees;

① Name, sal, Annual Salary
② NAME, SAL, ANNUAL SALARY
③ Name, SAL, Annual Salary
④ LAST_NAME, SALARY, SALARY*12 



2. SELECT문의 기능이 아닌것은? 4번

① projection
② selection
③ join
④ sort




3. 다음 SELECT명령의 결과는 몇 개의 Column으로 출력 되는가 ? 1번

   SELECT last_name ||': 1 Month salary = '||salary Monthly  FROM employees;

① 1
② 2
③ 3
④ 4




4. 다음 함수를 실행했을 때 출력되는 값은 얼마인가 ? 1번

  SELECT TRUNC(45.293,1) FROM dual;

① 45.2
② 47
③ 46
④ 46.9




5. 다음 SELECT문을 수행하면 결과가 나오지 않는다 원인이 되는 절은? 3번

① SELECT JOB_ID, SALARY "AVG"
② FROM EMPLOYEES
③ WHERE salary BETWEEN 3500 AND 2500 
④ ORDER BY 2;



6. 다음 SELECT 문장 수행 결과로 나올 수 있는 job_id 결과는 ? 1번
   
    SELECT employee_id, last_name, job_id
    FROM employees 
    WHERE job_id LIKE 'SA\_%' ESCAPE '\';

① SA_REP
② SA\_REP
③ SAREP
④ SAREP_%



7. 문자 함수 설명이 틀린것은? 4번

① LOWER : 소문자로 변환하는 함수
② INSTR : 지정된 문자열의 위치를 반환하는 함수
③ SUBSTR : 시작부터해서 몇개의 문자를 추출하는 함수
④ REPLACE : 길이가 n이 되도록 왼쪽부터 문자식으로 채운 표현식을 반환하는 함수



8. 다음 SELECT문에서 틀린 행번호는? 1번

①  SELECT DEPARTMENT_ID, JOB_ID, SUM(SALARY) SUM
②  FROM EMPLOYEES 
③  HAVING SUM(SALARY) > 4500
④  GROUP BY DEPARTMENT_ID;


9. 날짜를 문자로 변환해주는 함수는? 1번

① TO_CHAR 함수
② TO_DATE 함수
③ TO_NUMBER 함수
④ TO_TIMESTAMP 함수



10. 날짜 연산이 틀린것은? 4번

① DATE + NUMBER = DATE
② DATE - NUMBER = DATE
③ DATE - DATE = NUMBER
④ DATE + DATE = DATE


11. 그룹함수 설명으로 틀린것은? 3번

① 그룹함수는 null값을 무시한다.
② avg,sum,variance,stddev 함수는 인수값으로 숫자데이터만 사용할수있다.
③ WHERE절을 이용해서 그룹함수의 결과를 제한한다.
④ GROUP BY절을 사용해서 테이블의 행을 그룹으로 나눌수있다.


12. 다음 SQL문에서 틀린 곳은? 3번

① SELECT department_id dept_id, avg(salary)
② FROM employees
③ GROUP BY dept_id
④ ORDER BY dept_id


13. 카티시안곱의 설명의 옳은것은? 4번

① 조인조건이 잘만들어 졌다.
② 키값이 일치되는 데이터를 조인한다.
③ m대 1을 조인하면 m처럼 나온다.
④ 조인조건이 생략된 경우이다.


14. 조인 SQL문 틀린곳은? 3번

① SELECT e.last_name, d.department_name
② FROM employees e, departments d
③ WHERE department_id = department_id
④ AND e.last_name like '%a%';

15. 조인 SQL문 틀린곳은 ? 4번

① SELECT l.city, d.department_name
② FROM locations l JOIN departments d
③ USING (location_id)
④ WHERE d.location_id = 1400;

16. natural join의 설명이 틀린것은? 2번

① 두 테이블에서 이름이 같은 모든 컬럼을 기반으로 조인한다.
② 동일한 이름을 가진 열이 서로 다른 데이터 유형을 가져도  조인이 수행 된다.
③ equi join의 문법이다.
④ ANSI  표준 조인 유형이다.


17. SUBQUERY 설명이 틀린것은? 4번

① 서브쿼리는 괄호로 묶어야 한다.
② 단일행 서브쿼리에는 단일행연산자(=,>,>=,<,<=,<>)를 사용한다.
③ 여러행 서브쿼리에는 여러행연산자(IN,ANY,ALL)를 사용한다.
④ ANY는 AND의 의미이며, ALL은 OR의 의미이다.

18. 중첩서브쿼리 설명으로 옳은것은? 2번

① 서브쿼리가 먼저 실행되고 그값을 메인쿼리에서 사용한다.
② 메인쿼리를 먼저수행한다.
③ 메인쿼리를 수행하면 후보행값을 찾는다.
④ 서브쿼리는 메인쿼리의 갯수만큼 수행한다.


19. exists 연산자 설명으로 맞는것은? 1번

① 메인쿼리에 후보행값이 서브쿼리에 존재하면 true 더이상 검색을 하지않습니다.
② 서브쿼리를 수행해서 메인쿼리에 값을 찾는다.
③ 문자열 검색할때 사용
④ 메인쿼리에 후보행값이 서브쿼리에 존재하면 false 더이상 검색을 하지않습니다.


20. 다중행 서브쿼리에서 최대값보다 작음을 나타내는 연산자는? 3번

① > ANY
② = ANY
③ < ANY
④ > ALL

21. 집합연산자 설명이 틀린것은? 2번

① SELECT 리스트의 표현식의 갯수가 일치 해야 한다.
② SELECT 리스트의 각 열의 데이터 유형이 불일치해도 된다.
③ ORDER BY 절은 명령문의 맨 끝에만 사용한다.
④ UNION ALL은 정렬이 발생하지 않는다.


22. 아래 SQL문을 1) 조인 2) 상관서브쿼리로 변환해주세요. 


select employee_id, job_id
from employees
intersect
select employee_id, job_id
from job_history;

1) 조인
select e.employee_id, e.job_id
from employees e join job_history j
on e.employee_id = j.employee_id
and e.job_id = j.job_id;


2) 상관서브쿼리
select employee_id, job_id
from employees e
where (employee_id, job_id) = (select employee_id, job_id from job_history where employee_id = e.employee_id and job_id = e.job_id);


23. 이름이 T 로 시작하는 도시에 거주하는 사원의 employee_id, last_name, department_id 정보를 작성해주세요.
select employee_id, last_name, department_id
from employees e
where department_id = (select d.department_id from departments d join locations l on d.location_id = l.location_id where l.city like 'T%');


24. 사원이 없는 부서 정보를 출력해주세요.
select *
from departments d
where not exists (select 'x' from employees where department_id = d.department_id);


25. 총 급여 비용이 전체 회사의 총 급여 비용의 8 분의 1(1/8)을 초과하는 부서의 부서 이름을 표시하는 query 를 작성합니다. 
     WITH 절을 사용하여 이 query를 작성하고 query block의 이름을 SUMMARY 로 지정합니다.

with
dept_sal as (select department_id, sum(salary) dept_sum from employees group by department_id),
total_sal as (select sum(salary) as total from employees)
select d.department_name
from departments d join dept_sal s
on d.department_id = s.department_id
where ((select total from total_sal)/8) < s.dept_sum;


