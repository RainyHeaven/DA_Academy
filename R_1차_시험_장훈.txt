R 1차 시험

이름 : 장훈

1. 변수선언시에  틀린것은 ? 4
① x 	<- 1
② y 	<- "변수"
③ .x 	<- 100
④ 2a 	<- "변수"
- 변수이름은 알파벳, 숫자, _, . 사용가능
- 첫 글자는 알파벳, . 가능
- .으로 시작시 바로 뒤에 숫자를 입력할 수 없다.

함수 안에서 변수에 값을 할당할 때
전역변수: 변수 <<- 값
지역변수: 변수 <- 값
지역변수: 변수 = 값

2. 나누기 연산자 중에 몫만 표현하는 연산자는 ? 2
① / : 나누기(소수점 포함)
② %/% : 나누기의 몫
③ %% : 나누기의 나머지
④ %*% : 행렬의 곱

3. 범주형 데이터를 표현하는 데이터 타입은 ? 3
① vector: 같은 데이터 타입을 갖는 1차원 배열
② list : 서로 다른 데이터 타입을 갖는 1차원 배열, 중첩 가능
③ factor : 범주형 데이터
④ matrix: 같은 데이터 타입을 갖는 2차원 배열
array: 같은 데이터 타입을 갖는 3차원 배열
data frame: 서로 다른 데이터타입을 갖는 컬럼으로 이루어진 2차원 배열
table: data frame과 동일한 구조를 갖는 배열, 속도가 빠름

4. 벡터 연산 함수 설명으로 틀린것은 ? 4
① identical(x,y) : x와 y가 동일하면 TRUE, 틀리면 FALSE 
② union(x,y) : x와 y 합집합
③ intersect(x,y) : x와 y 교집합
④ setdiff(x,y) : x와 y같은 집합인지 판단 #차집합

5. 데이터 타입 변환 하는 함수 설명으로 틀린것은 ? 1
① as.matrix : 배열로 변환 하는 함수 #행렬로 변환하는 함수
② as.data.frame : 데이터 프레임으로 변환 하는 함수
③ as.factor : 팩터형으로 변환하는 함수
④ as.numeric : 숫자를 저장하는 벡터로 변환 하는 함수

6. 다음과 같은 행렬에 저장되어 있는 데이터의 행에 대해 합을 구하는 식이 옳은것은 ? 1
m <- matrix(1:9, ncol=3)
① apply(m,1,sum) #rowSums()
② apply(m,2,sum) #colSums()
③ lapply(m,1,sum) #lapply 는 margin 옵션 적용 불가
④ lapply(m,2,sum) 

7.  데이터프레임 함수 설명으로 틀린것은? 1
① ncol : 열의 이름을 출력 #열의 수
② nrow : 행의 개수를 출력
③ rownames : 행의 이름을 출력
④ names : 열의 이름을 출력

9. 동일한 문자열을 문자열 벡터에서 찾아서 인덱스 번호를 리턴하는 함수? 1
① grep
② melt #wide형태에서 long 형태로 변환
③ str_detect #특정 문자가 있는지 검사해 TRUE/FALSE 출력
④ str_count #특정 문자의 등장 횟수를 출력

10.  반복문에서 조건을 확인 한 후 빠져나오는 함수는? 4
① exp #지수함수
② next #다음 loop로 건너뜀
③ close
④ break
x <- 1:5
for (i in x){
  if(i==3){break}
  print(i)
}

for (i in x){
  if(i==3){next}
  print(i)
}

11. x 변수에 1,2,3 이 들어 있습니다. 결과를 list형으로 2,4,6 로 출력해 주세요.
x <- 1:3
list(x*2)

12. 아래와 같은 데이터가 들어 있다. odd변수에 홀수값이 입력되도록, even 짝수값이 입력되도록 하세요.
x <- c(1,2,3,4,5)
odd <- x[x%%2==1]
even <- x[x%%2==0]

odd <- NULL
even <- NULL
for(i in x){ifelse(i%%2==0, even <- c(even,i), odd <- c(odd,i))}

13. 아래와 같은 데이터가 들어 있는 변수를 생성하려고 수행 순서는 matrix로 먼저 만드시고 data.frame로 변환하는 일련의 작업을 기술하세요.
<화면>
name sql python  r
scott  90     70 85
harden  80     90 70
curry  70     80 90
name <- matrix(c('scott', 'harden', 'curry'), nrow=3)
sql <- matrix(c(90,80,70), nrow=3)
python <- matrix(c(70,90,80), nrow=3)
r <- matrix(c(85,70,90), nrow=3)
data.frame('name'=name, 'sql'=sql, 'python'=python, 'r'=r, stringsAsFactors = F)

mat <- matrix(c(90,80,70,70,90,80,85,70,90), nrow=3, ncol=3)
colnames(mat) <- c('sql', 'python', 'r')
cbind(name=c('scott', 'harden', 'curry'), data.frame(mat))

14.  job_id가  ST_CLERK 가 아닌 사원들의 last_name, salary, job_id를 출력하는데 급여가 높은 사원부터 출력되게하세요. 단 orderBy 함수를 이용하세요.
setwd('c:/data')
emp <- read.csv('emp_new.csv')
library(doBy)
orderBy(~-SALARY, emp[emp$JOB_ID!='ST_CLERK', c("LAST_NAME", "SALARY", "JOB_ID")])

orderBy(~-SALARY, subset(emp, JOB_ID != 'ST_CLERK', select=c('LAST_NAME', 'SALARY', 'JOB_ID')))

15. 벡터 x 변수에 1,2,3,4,5 입력한 후 2,4번째 제외한 요소만 출력하세요.
x <- 1:5
x[-c(2,4)]

16. x변수에 값중에 2이상이고 4이하인 값들만 출력하세요
x[x>=2&x<=4]

17. x변수에 짝수에 값만 10을 곱한 후 x 변수에 적용하세요.
x <- ifelse(x%%2==0, 10*x, x)

18. m이라는 행렬변수에는  1~9까지 수가 들어 있는 3행3열 모양으로 값은 행우선으로 입력하세요.
m <- matrix(1:9, nrow=3, ncol=3, byrow = T)

19. m변수의 모양을 9행 1열 모양으로 수정하면서 숫자값이 순서되로 저장해주세요.
dim(m) <- list(9, 1)
m <- m[order(m)]

m <- t(m)
dim(m) <- list(9, 1)

20. m 변수를 3행3열로 적용해주세요.
dim(m) <- list(3,3)

21. m 변수에 값을 행단위로 합, 열단위로 평균을 구해주세요.
rowSums(m)
colMeans(m)

apply(m, 1, sum)
apply(m, 2, mean)

22. m 변수의 행의 수, 열의수를 구하세요.
nrow(m)
ncol(m)

23. a 변수에 1부터12 까지 입력되어 있는 배열변수를 생성하세요. 배열의 모양은 2행3열2차원으로 생성하세요.
a <- array(1:12, dim=c(2, 3, 2))

24. a배열 변수에 2차원정보를 출력해주세요.
a[,,2]

25. a 배열 변수에 값을 행을 기준 합, 열을 기준 합을 구하세요.
#행 기준 합 - 면 별로
matrix(c(rowSums(a[,,1]), rowSums(a[,,2])), nrow=2, dimnames = list(c('1행의 합', '2행의 합'), c('1면', '2면')))
#행 기준 합 - 면 통합
rowSums(a)

#열 기준 합 - 면 별로
x <- colSums(a)
dimnames(x) <- list(c('1열의 합', '2열의 합', '3열의 합'), c('1면', '2면'))
#열 기준 합 - 면 통합
rowSums(colSums(a))

apply(a, 1, sum)
apply(a, 2, sum)
apply(a, 3, sum)
