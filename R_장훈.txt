# [문제1] x변수에 1,3,5,7,9 값을 입력, y 변수에 1,2,3,4,5 값을 입력하세요.
x <- c(1,3,5,7,9)
y <- c(1,2,3,4,5)

# [문제2] x 변수와 y 변수를 중복성 없이 하나로 합친후에 u 변수에 넣어 주세요.
u <- sort(union(x,y), decreasing = FALSE)
u
# [문제3] x 변수와 y 변수의 값들중에 중복성만 추출해서 i 변수에 넣어주세요.
i <- intersect(x,y)

# [문제4] x 변수의 값과 y 변수의 값중에 순수하게 x 변수에 들어 있는 값만 추출해서 m 변수에 넣어 주세요.
m <- setdiff(x, y)
m
# [문제5] x 변수의 값과 y 변수의 값이 일치가 되면 TRUE 아니면 FALSE를 출력해주세요.
identical(x, y)

# [문제6] x 변수에 값들을 10을 곱한 결과를 x 변수에 적용하세요.
x <- x * 10

# [문제7] x 변수에 있는 50을 5로 수정하세요.
x
x[3] <- 5

# [문제8]  x 변수에 있는 10 30  5 70 90을  원래의 값으로 1,3,5,7,9로 되돌려 주세요.단 union, 정수 나누기, sort 만 사용하세요
x <- c(10, 30, 5, 70, 90)
x <- sort(union((x[-3]%/%10), x[3]))

x[which(5 == x)] <- 50
x <- x%/%10
x
# [문제9] x변수에 11숫자를 제일 뒤에 입력하세요. 단 append와 length를 이용하세요.
append(x, 11, after=length(x))

# [문제10] x 변수에 제일 뒤에 있는 값을 NA로 수정하세요. 단 length를 이용하세요.
x[length(x)] <- NA

# [문제11] lst 변수에 name = 'king' , height = 180, weight = 70 값을 넣어 주세요.
lst <- list(name = 'king', height = 180, weight = 70)
lst

# [문제12] lst 변수에  blood = 'A' 추가하세요.
lst$blood <- 'A'
lst

# [문제13] lst 변수에 name의 값을 'scott'로 수정하세요.
lst$name <- 'scott'

# [문제14] lst변수에 2번인덱스 값만 출력해주세요.
lst[[2]]

# [문제15] lst변수에 blood 이름을 blood type 이름으로 수정하세요.
names(lst) <- c('name', 'height', 'weight', 'blood type')
names(lst)[4] <- 'blood type'
lst

# [문제16] x 변수에 벡터값 1,2,3,5,6 을 입력한 후 3번째 요소 뒤에 4를 입력하세요.
x <- c(1,2,3,5,6)
x <- append(x, 4, after = 3)

# [문제17] 1부터  3씩 증가하는 10 이하의 정수값을 출력하세요.
seq(1, 10, 3)
seq(1, 10, length.out=100) #length.out = x : x개만큼 등분

# [문제18] 10 부터 20 까지의 값을 x 변수에 생성한 후 원소의 값이 15 이상이고 18 이하인 값들만 출력하세요.
x <- c(10:20)
x[which(15 <= x & 18 >= x)]

# [문제19] 10 부터 20 까지의 값을 x 변수에 생성한 후 원소의 값이 15 이상이고 18 이하인 값들만 2곱한 값으로 수정하세요.
x <- c(10:20)
x[which(15 <= x & 18 >= x)] <- x[which(15 <= x & 18 >= x)]*2

# [문제20] x 변수에 행렬을 구성하세요. 값은 1부터 10까지 입력하시고 5행 2열으로 만들면서 값은 열을 기준으로 생성하세요.
x <- matrix(c(1:10), nrow=5, byrow=FALSE)

#[문제21] x 변수에 열을 기준으로 11,12,13,14,15 값을 추가하세요.
x <- cbind(x, c(11:15))
x
# [문제22] x 변수에 행을 기준으로 16,17,18 값을 추가하세요.
x <- rbind(x, c(16:18))
x

# [문제23] x변수에 6행의 값을 20,21,22 로 수정하세요.
x[6,] <- c(20:22)
x

# [문제24] x 변수에 6행을 제거해주세요.
x <- x[-6,]
x

# [문제25] x 배열을 생성하세요. 1부터 12까지 값을 가지고있는 배열을 생성하세요. 면은 3개가 만들어지도록하세요.
x <- array(c(1:12), dim=c(2,2,3))
x <- array(1:12, dim=c(2,2,3))

#[문제26] x 배열 변수에 컬럼이름은 'a','b'로 설정하세요.
colnames(x) <- c('a','b')

#[문제27] x 배열 변수에 행이름은 'row1','row2'로 설정하세요.
rownames(x) <- c('row1','row2')

#[문제28] x 배열 변수에 면을 2로 수정하세요.
dim(x) <- c(3,2,2)
x

# [문제29] 벡터에 있는 값 "large", "medium", "small", "small", "large", "medium" 을 factor 변수로 구성하세요. 
# 변수이름은x로 생성하시고 levels samall, medium, large 순으로 지정하세요.
x <- factor(c('large','medium','small','small','large','medium'), levels=c('small', 'medium','large'),ordered=TRUE)
x

#[문제30] x factor형 목록이름중에 small 을 s로 수정하세요.
levels(x)[1] <- 's'
levels(x)[levels(x) == 'small'] <- 's'
x

# [문제31] 아래와 같은 모양의 변수를 생성하세요. 변수 이름은 df로 하세요.
# <화면출력>
# df
# name sql  plsql
# 1  king  96     75
# 2 smith  82     91
# 3  jane  78     86
df <- data.frame(name=c('king','smith','jane'), sql=c(96, 82, 78), plsql=c(75, 91, 86), stringsAsFactors=FALSE)
df

# [문제32] df변수에 james, 90, 80 추가 해주세요.
# <화면출력>
# > df
# name sql plsql
# 1  king  96    75
# 2 smith  82    91
# 3  jane  78    86
# 4 james  90    80
df[4,] <- c('james', 90, 80)
df
df <- rbind(df, c('james',90,80))
df <- rbind(df, data.frame(name='james',sql=90,plsql=80))

# [문제33] james에 대한 row 정보만 출력하세요.
# <화면출력>
# name sql plsql  r
# 4 james  90    80 60
df[df$name=='james',]

# [문제34]. emp 변수에 있는 데이터 중에 급여가 3000 인 사원들의 last_name, salary를 출력하세요. 단 emp 변수에 컬럼정보를 확인하시고 수행하세요.
names(emp)
emp[emp$SALARY==3000, c('LAST_NAME', 'SALARY')]
# desc emp
# select last_name, salary from emp where salary = 3000;

# [문제35] 급여가 2000 이상인 사원들의 last_name, salary를 출력하세요.
emp[emp$SALARY>=2000, c('LAST_NAME', 'SALARY')]
# select last_name, salary from emp where salary >= 2000;

# [문제36] job이 ST_CLERK인 사원들의 이름과 월급과 직업을  출력하세요.
emp[emp$JOB_ID=='ST_CLERK', c('LAST_NAME', 'SALARY', 'JOB_ID')]
# select last_name, salary, job_id from emp where job_id = 'ST_CLERK';

# [문제37] job이 ST_CLERK이 아닌 사원들의 이름과 월급과 직업을  출력하세요.
emp[emp$JOB_ID!='ST_CLERK', c('LAST_NAME', 'SALARY', 'JOB_ID')]
# select last_name, salary, job_id from emp where job_id != 'ST_CLERK';

# [문제38] 오라클의 in 연산자와 비슷한 R연산자는?
%in%

# [문제39] job이 AD_ASST, MK_MAN 인 사원들의 employee_id,last_name,job_id를 출력하세요.
emp[emp$JOB_ID%in%c('AD_ASST', 'MK_MAN'), c('EMPLOYEE_ID', 'LAST_NAME', 'JOB_ID')]
#select employee_id, last_name, job_id from emp where job_id in ('AD_ASST', 'MK_MAN');

# [문제40] job이 ST_CLERK, SH_CLERK, SA_REP 아닌 사원들의 employee_id,last_name,job_id를 출력하세요.
emp[!emp$JOB_ID%in%c('ST_CLERK','SH_CLERK', 'SA_REP'), c('EMPLOYEE_ID', 'LAST_NAME', "JOB_ID")]
#select employee_id, last_name, job_id from emp where job_id not in ('ST_CLERK', 'SH_CLERK', 'SA_REP');

# [문제41] 부서번호가 10번,20번인 사원들의 last_name, salary, department_id를 출력하세요.
emp[emp$DEPARTMENT_ID%in%c(10, 20), c("LAST_NAME", "SALARY", "DEPARTMENT_ID")]
#select last_name, salary, department_id from emp where department_id in (10, 20);

# [문제42] 오라클의 연결 연산자 와 비슷한 R 연산자는?
# 오라클		       R
# || concat   		paste(,,,,)

# [문제43] 아래결과와 같이 출력되도록하세요. 
# Grant 의 직업은  SH_CLERK  입니다.
help(paste)
paste(emp[,'LAST_NAME'],'의 직업은',emp[,'JOB_ID'],'입니다.')
paste0(emp$LAST_NAME,'의 직업은',emp$JOB_ID,'입니다.')

# [문제44] R에서 NA(결측치)를 체크하는 함수는?
is.na()

# [문제45] commission_pct에  NA 인 사원들의 last_name, salary, commission_pct를 출력하세요.
emp[is.na(emp$COMMISSION_PCT), c("LAST_NAME", "SALARY", "COMMISSION_PCT")]
# select last_name, salary, commission_pct from emp where commission_pct is null;

# [문제46] department_id에 NA 인 사원들의 last_name, salary, department_id를 출력하세요.
emp[is.na(emp$DEPARTMENT_ID), c("LAST_NAME", "SALARY", "DEPARTMENT_ID")]
# select last_name, salary, department_id from emp where department_id is null;

# [문제47] commission_pct에  NA가 아닌 사원들의 last_name, salary, commission_pct를 출력하세요.
emp[!is.na(emp$COMMISSION_PCT), c("LAST_NAME", "SALARY", "COMMISSION_PCT")]
# select last_name, salary, commission_pct from emp where commission_pct is not null;

# [문제48] 30번 부서 사원들이면서 급여는 3000이상인 사원들의 employee_id, salary, department_id를 출력하세요.
emp[emp$DEPARTMENT_ID==30 & emp$SALARY >= 3000 , c("EMPLOYEE_ID", "SALARY", "DEPARTMENT_ID")]
# select employee_id, salary, department_id from emp where department_id = 30 and salary >= 3000;
#조건이 걸린 키값에 NA값이 있다면 해당열은 모두 NA가 되어 출력됨
#na.omit(): na가 있는 행을 모두 제거
na.omit(emp[emp$DEPARTMENT_ID==30 & emp$SALARY >= 3000 , c("EMPLOYEE_ID", "SALARY", "DEPARTMENT_ID")]) 

# [문제49] 20번부서 사원이면서 급여는 10000를 초과한 사원 또는 급여가 2500 미만의 사원들의 employee_id, salary, department_id를 출력하세요.
emp[(emp$DEPARTMENT_ID==20 & emp$SALARY > 10000)|emp$SALARY<2500, c("EMPLOYEE_ID", "SALARY", "DEPARTMENT_ID")]
emp[emp$DEPARTMENT_ID==20 & emp$SALARY > 10000|emp$SALARY<2500, c("EMPLOYEE_ID", "SALARY", "DEPARTMENT_ID")]
emp[emp$SALARY<2500, c("EMPLOYEE_ID", "SALARY", "DEPARTMENT_ID")]
# select employee_id, salary, department_id from emp where (department_id = 20 and salary > 10000) or salary < 2500;

# [문제50]last_name의 첫번째 글자가 A 로 시작하는 사원들의 last_name, salary를 출력하세요.
emp[grep('^A', emp$LAST_NAME,ignore.case=FALSE), c("LAST_NAME", "SALARY")]
emp[grep('^A.*', emp$LAST_NAME,ignore.case=FALSE), c("LAST_NAME", "SALARY")]

# [문제51]last_name의 끝글자가 g 로 끝나는 사원들의 last_name, salary를 출력하세요.
emp[grep('g$', emp$LAST_NAME, ignore.case=FALSE), c("LAST_NAME", "SALARY")]
emp[grep('*g$', emp$LAST_NAME, ignore.case=FALSE), c("LAST_NAME", "SALARY")]
emp[grep('*.g$', emp$LAST_NAME, ignore.case=FALSE), c("LAST_NAME", "SALARY")]
 
# [문제52]last_name의 z 를 포함하고 있는 사원들의 last_name, salary를 출력하세요.
emp[grep('z', emp$LAST_NAME, ignore.case=TRUE), c("LAST_NAME","SALARY")]
emp[grep('z', emp$LAST_NAME, ignore.case=TRUE), c("LAST_NAME","SALARY")]
emp[grep('^.*z.*$', emp$LAST_NAME, ignore.case=TRUE), c("LAST_NAME","SALARY")]
 
# [문제53]last_name의 두번째 철자가 u 인 사원들의 last_name, salary를 출력하세요.
emp[grep('^.u', emp$LAST_NAME, ignore.case=FALSE), c("LAST_NAME", "SALARY")]

# [문제54] developer글자를 첫글자 대문자, 뒤글자는 소문자로 변환하세요.
word <- 'developer'
last <- nchar(word)
paste0(toupper(substr(word, 1, 1)),tolower(substr(word,2,last)))

library(tools)
toTitleCase(word)

install.packages('stringr')
library(stringr)
str_to_title(word)