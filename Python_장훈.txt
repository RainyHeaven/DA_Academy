[문제1] x,y 변수에 있는 값을 기준으로 수행한 결과 입니다.
x 와 y 변수에 어떤 값이 있어야 하나요.
또한 결과값이 나오기 위해서 어떤 계산식을 만들어야 하는지 계산식을 만들어 보세요.

result_1 =  7
result_2 =  3
result_3 =  -3
result_4 =  10
result_5 =  0.4
result_6 =  0
result_7 =  2
result_8 =  32
result_9 =  7.0
result_10 =  -21
result_11 =  50
result_12 =  29
x+y=7
x−y=3
2x=10

x= 5
y = 2

result_1 = 7 
result_2 = 3
result_3 = - result_2
result_4 = result_1 + result_2
result_5 =  ((result_2*result_2 - result_1)*result_1 - (result_4))*(1/(result_4))
result_6 = 0
result_7 = result_2*result_2 - result_1
result_8 = (result_1 - result_7)*result_1 - result_2
result_9 = (result_1)/result_4*result_4
result_10 = result_1*result_3
result_11 = (result_4-result_7)*result_1 - result_7*result_2
result_12 = result_8-result_2
[문제2] vstr 변수에 이 문자열을 입력하세요.
v_str = "시간은 멈추지 않습니다. 하루를 유익하게 살아야합니다."

"시간은 멈추지 않습니다." 만 출력해주세요
"하루를 유익하게 살아야합니다." 만 출력해주세요
"살아야합니다." 만 출력해주세요
"시추니루하야" 이 글자만 출력해주세요.
"시간은 멈추지 않습니다. 하루를 유익하게" 만 출력해주세요.
v_str 문자열을 뒤순으로 출력해 주세요.
print(v_str[:13]) 
print(v_str[14:]) 
print(v_str[-7:]) 
print(v_str[::5]) 
print(v_str[:-8]) 
print(v_str[::-1])

[문제3]

>>> x = '파리썬'
>>> x
'파리썬'
인덱스를 이용해서 리 -> 이로 변환하세요.

x = x[0]+'이'+x[2]

x = x.replace('리', '이')

a = 'a b c d e f g' 변수에 문자열이 들어 있습니다. 다음을 수행하세요.
[문제4] a 변수에 있는 문자의 갯수를 구하세요.

a = 'a b c d e f g'
len(a)
13개

[문제5] a 변수에 공백문자 갯수를 구하세요.

a = 'a b c d e f g'
a.count(' ')
6개

[문제6] a 변수 안에 있는 공백문자를 제외한 갯수를 구하세요.

len(a.split())
7개

[문제7] a 변수에 있는 공백문자를 제거한 후 b 변수에 넣어주세요

a = 'a b c d e f g'
b = a.replace(' ', '')
[문제8] a 변수에 있는 문자를 분리한 후 c 변수에 넣어주세요.
c = a.split()

[문제9] c 변수에 있는 문자를 합쳐서 자신의 변수에 다시 넣어주세요.
c = ''.join(c)

아래와 같은 문자데이터가 있습니다.
url = 'http://www.python.org'
[문제10] http:// 제거한 후 url 변수에 넣어 주세요.

url = 'http://www.python.org'
url = url[7:]
url = url.replace('http://', '')
[문제11] url변수에 있는 문자 데이터에 '.'을 기준으로 분리하세요.

url = 'http://www.python.org'
url = url.split('.')
[문제12] url변수에 있는 문자데이터를 www.python.org 모양으로 만드세요.
url = '.'.join(url)

[문제13] url변수에 있는 문자데이터를 대문자로 변환하세요.
url.upper()

[문제14] url변수에 있는 문자데이터를 소문자로 변환하세요.
url.lower()

[문제15] 반복문을 사용하지 않고 * 를 가로 100개 출력
print('*'*100)

[문제16] 반복문을 사용하지 않고 * 를 세로 10개 출력
print('*\n'*10)

[문제17] day 변수에 20180905를 입력하세요. 화면 출력은 2018년 09월 05일 출력하세요.

day = '20180905'
print(day[0:4]+'년 '+day[4:6]+'월 '+day[6:]+'일')
food 변수 아래와 같이 데이터가 들어 있습니다.food변수를 생성하시고 문제를 풀어보세요.

>>> food[0]
['김밥', '라면', '오뎅']
>>> food[1]
['비빔밥', '김치찌게']
>>> food[2]
['자장면', '짬뽕']
[문제18] 1번 index에 청국장 추가 하세요

food = [['김밥', '라면', '오뎅'], ['비빔밥', '김치찌게'], ['자장면','짬뽕']]
food[1].append('청국장')
[문제19] 2번 index에 탕수육 추가하세요.
food[2].append('탕수육')

[문제20] 0번 index에 있는 오뎅 삭제하세요.
food[0].remove('오뎅')

[문제21] 0번 index에 튀김, 튀김, 떡복이 한꺼번에 추가하세요
food[0][2:2] = ['튀김', '튀김', '떡볶이']
food[0].extend(['튀김', '튀김', '떡볶이'])

[문제22] 2번 index에 2번 위치에 유산슬 추가하세요
food[2].insert(2, '유산슬')

[문제23] 튀김 갯수를 세어주세요
food[0].count('튀김')

[문제24] 0번 index만 정렬해주세요
food[0].sort()

[문제25] 0번 index에 마지막 데이터 삭제하세요
food[0].pop()

[문제26] 숫자를 입력값으로 받아서 짝수인지 홀수인지를 출력하는 프로그램을 만드세요.

if int(input())%2:
    print('홀수')
else:
    print('짝수')
[문제27]한글, alphabet만 입력받아야 합니다. 만약에 다른 문자가 들어 오면 "한글, alphabet 이외의 문자가 포함되어 있습니다." 라는 문구가 출력해야 하고 아니면 입력받은 문자를 출력하세요.

char = input()
if char.isalpha():
    print(char)
else:
    print('한글, alphabet 이외의 문자가 포함되어 있습니다')
`
[문제28] 숫자를 입력값으로 받습니다. 만약 숫자가 이외의 값이 들어 오면 "숫자 이외의 문자가 포함되어 있습니다." 아니면 숫자 출력하세요.

char = input()
if char.isnumeric():
    print(char)
else:
    print('숫자 이외의 문자가 포함되어 있습니다')
[문제29] 1부터 100까지 합을 구하세요.

i = 1
sum = 0
while i <= 100:
    sum += i
    i += 1
print(sum)
[문제30] 단을 입력값으로 받아서 구구단을 출력하세요.

# for문
dan = int(input())
print('구구단 '+str(dan)+'단 입니다.')
for i in range(1,10):
    print('{} x {} = {}'.format(dan, i, dan*i))

# while문
dan = int(input())
print('구구단 '+str(dan)+'단 입니다.')
i = 1
while i <= 9:
    print('{} x {} = {}'.format(dan, i, dan*i))
    i += 1

[문제30] 1부터 100까지의 3의 배수를 출력, 합을 구하세요. while문을 이용하세요.

i = 0
total = 0
while True:
    i += 1
    if i%3 == 0:
        print(i)
        total += i
    if i == 100:
        print('1부터 100까지 3의 배수의 합은 {}입니다.'.format(total))
        break   
[문제31] 조건이 없는 상태에서 1부터 10까지 3,5를 제외한 합을 구하세요. continue문, break문을 이용하세요.

i = 0
total = 0
while True:
    i += 1
    if i == 3 or i == 5:
        continue
    elif i > 10:
        print(total)
        break
    else:
        total += i
[문제32] 리스트 변수에 18,2,3,1,4,5,7,8,9,10,11,15,16 값이 들어 있습니다. 짝수만 합을 구하세요.

while문

data = [18,2,3,1,4,5,7,8,9,10,11,15,16]
i = 0
total = 0
while i < len(data):
    if data[i]%2 == 0:
        total += data[i]
    i += 1
print(total)
for문

data = [18,2,3,1,4,5,7,8,9,10,11,15,16]
total = 0
for i in data:
    if i%2==0:
        total+=i
print(total)
[문제33] 구구단을 생성하세요

dan = 2
while dan <= 9:
    coef = 1
    print('구구단 {}단 입니다.'.format(dan))
    while coef <= 9:
        print('{} x {} = {}'.format(dan, coef, dan*coef))
        coef += 1
    dan+=1
[문제34] 리스트 변수에 12,3,21,4,5,7,33,2,18,9,10,31,15,16 값이 들어 있습니다. 최대값을 구하세요.

data = [12,3,21,4,5,7,33,2,18,9,10,31,15,16]
max(data)
while문

i = 0
v_Max = data[0]
while i < len(data):
    i += 1
    if v_Max < data[i]:
        v_Max = data[i]
print(v_Max)
for문

v_Max = data[0]
for i in data:
    if v_Max < i:
        v_Max = i
print(v_Max)
[문제35] 리스트 변수에 12,3,21,4,5,7,33,2,18,9,10,31,15,16 값이 들어 있습니다. 최소값을 구하세요.

data = [12,3,21,4,5,7,33,2,18,9,10,31,15,16]
min(data)
while문

i = 1
v_Min = data[0]
while i < len(data):
    if v_Min > data[i]:
        v_Min = data[i]
    i += 1
print(v_Min)
for문

v_Min = data[0]
for i in data:
    if v_Min > i:
        v_Min = i
print(v_Min)
[문제36] 학생들의 점수가 90,55,63,78,80 점이 있습니다. 60점 이상이면 합격, 60점 미만이면 불합격 출력해 주세요.

scores = [90,55,63,78,80]
for score in scores:
    if score >= 60:
        print(score, '점 합격')
    else:
        print(score, '점 불합격')
[문제37] 1부터 100까지 합을 구하세요.(for 이용)

total = 0
for i in range(1, 101):
    total += i
print(total)
[문제38] 1부터 10까지 출력하세요. 단 4, 8은 제외(for 이용)

for i in range(1, 11):
    if i == 4 or i == 8:
        continue
    else:
        print(i)
[문제39] 화면과 같이 출력하세요.(for 이용)

가로의 숫자를 입력하세요 : 5 세로의 숫자를 입력하세요 : 5 ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★

col = int(input('가로의 숫자를 입력하세요 :'))
row = int(input('세로의 숫자를 입력하세요 :'))
for i in range(row):
    print('★'*col)
[문제40] 구구단을 출력하세요.(for 이용)

for i in range(2, 10):
    print('구구단', i, '단 입니다.')
    for j in range(1, 10):
        print(i, 'x', j, '=', i*j)
[문제41] 구구단을 만드세요. 2단에서 9단까지만 입력하세요, [0은 구구단 전부를 출력합니다.]:

dan = int(input('2단에서 9단까지만 입력하세요, [0은 구구단 전부를 출력합니다]:'))
if dan == 0:
    for i in range(2, 10):
        print('구구단', i, '단 입니다.')
        for j in range(1, 10):
            print(i, 'x', j, '=', i*j)
elif 2 <= dan <= 9:
    print('구구단', dan, '단 입니다.')
    for j in range(1, 10):
        print(dan, 'x', j, '=', dan*j)
else:
    print('올바른 단 수를 입력하세요.')
[문제42]lst 변수에 a,b,c,d값이 있습니다. for문을 이용하여 아래화면과 같이 출력하세요. 0번 a값이 있습니다. 1번 b값이 있습니다. 2번 c값이 있습니다. 3번 d값이 있습니다.

lst = ['a','b','c','d']
for i in range(len(lst)):
    print('{}번 {}값이 있습니다'.format(i, lst[i]))
[문제43] 1부터 9까지 x 리스트 변수에 입력하세요. y변수는 x 변수의 값을 2곱한 값으로 입력해주세요.

x = list(range(1,10))
y = []
for i in x:
    y.append(i*2)
print(y)
[문제44] apple, banana, orange 리스트 변수에 값을 입력하시고 이 값들의 길이를 출력해주세요.

lst = ['apple', 'banana','orange']
for word in lst:
    print(len(word))
print([len(word) for word in lst])
[문제45] 변수에 아래와 같이 들어 있습니다. 아래처럼 결과를 출력하세요.
lst1 = [1,2,3]
lst2 = [4,5,6]
출력결과
[4, 5, 6, 8, 10, 12, 12, 15, 18]

lst1 = [1,2,3]
lst2 = [4,5,6]
result = []
for i in lst1:
    for j in lst2:
        result.append(i*j)
print(result)
print([i*j for i in lst1 for j in lst2])
[문제46] 1부터 100까지 값중에 짝수만 x변수에 입력해주세요.

x = []
for i in range(1, 101):
    if i%2 == 0:
        x.append(i)
print(x)
x = [i for i in range(1, 101) if i%2 == 0]
print(x)

[문제47] 튜플변수에 사과, 귤, 오렌지, 배, 포도, 바나나, 자몽, 키위, 딸기, 블루베리, 망고를 입력하시고 과일이름중에 세글자 이상인 과일만 fruit_lst변수에 입력해주세요.

fruits = ('사과', '귤', '오렌지', '배', '포도', '바나나', '자몽','키위', '딸기','블루베리', '망고')
[fruit for fruit in fruits if len(fruit) >= 3]
[문제48] 과일판매 현황을 dictionary 변수로 생성하세요. 과일 이름을 키로 하고 수량은 값으로 표현한후 과일이름만 대문자로 출력해주세요. apple 100 , banana 300, orange 300

sales = {'apple':100, 'banana':300, 'orange':300}
for name in sales.keys():
    print(name.upper())
[i.upper() for i in list(sale.keys())]

for i in sale.keys():
    print(i.upper(), end=',')

for i,v in sale.items(): # items는 키와 값을 모두 불러와야 하므로 변수를 2개 지정해야 한다.
    print(i.upper()+':'+str(v),end=',\0') # 값을 문자 숫자 붙이려 하면 str을 통해서 형변환 하여 붙인다.

[i.upper() for i in sale.keys()]
[[i.upper(),v] for i,v in sale.items()] # i,v 둘다 값을 불러야 하기 떄문에 [[]] 괄호를 두번해야 한다.
[문제49] 함수에 두 개의 숫자를 입력 값으로 받아서 값을 비교 하는 프로그램을 작성하세요.

def num_compare(a,b):
    if a > b:
        print('{}가 {}보다 큰 수 입니다.'.format(a,b))
        return a
    elif a < b:
        print('{}가 {}보다 큰 수 입니다.'.format(b,a))
        return b
    elif a == b:
        print('{}와 {}는 같은 수 입니다.'.format(a,b))
        return a
[문제50] 두 인수값을 받아서 합한 값을 리턴해주는 sum함수를 생성하세요.

def sum(a, b):
    return a+b
[문제51] 다음과 같은 함수를 만드시오.

cal("sum",1,2,3,4,5) - 15
cal("multiply",1,2,3,4,5) - 120
def cal(do, *nums):
    if do == 'sum':
        result = 0
        for num in nums:
            result += num
        return result
    elif do == 'multiply':
        result = 1
        for num in nums:
            result *= num
        return result
[문제52] 여러 숫자를 인수값으로 받아서 합과 평균을 출력하는 aggF함수를 생성하세요.

aggF(1,2,3,4,5,6,7,8,9,10)

합 :  55
평균 : 5.5 
def aggF(*nums):
    nsum = 0
    for num in nums:
        nsum += num
    print('합 :', nsum,'\n평균 :', nsum/len(nums))
    return nsum,nsum/len(nums)
[문제53] 입력값을 누적해서 더하는 함수를 작성하세요.

print(add(2))
2

print(add(8))
10
total = 0
def add(n):
    global total
    total += n
    return total
[문제54] 아래와 같이 변수에 값이 들어 있습니다. exchang함수에 x변수에 값을 넣으면 y로 변환하는 함수를 만드세요.

x = ["귀도","반","로섬"]
y = ["Guido","van", "Rossum"]
x = ["귀도","반","로섬"]
y = ["Guido","van", "Rossum"]

def exchang(x):
    for i in range(len(x)):
        x[i] = y[i]
    print(x)
[문제55]약수를 구하는 divisor 함수를 생성하세요.

1이상의 숫자를 입력하세요: 100
[100, 50, 25, 20, 10, 5, 4, 2, 1]
def divisor(num):
    result = []
    num = int(input('1이상의 숫자를 입력하세요: '))
    for i in range(num,0,-1):
        if num%i == 0:
            result.append(i)
    return result

[문제56] 여러 값을 동일한 변수에 순차적으로 저장할수 있는 용도의 변수 타입과 부호는 ?

리스트   
[]   
[문제57] x 리스트 변수에 1, 3, 5, 7, 9 를 입력하세요

x = [1,3,5,7,9]
[문제58] x 변수에 타입을 확인하세요.

type(x)
[문제59] x변수에 첫번째값을 확인해주세요

x[0]
[문제60] x변수에 제일뒤에 값을 확인해주세요

x[-1]
[문제61] x변수에 10를 제일 뒤에 추가해주세요.

x.append(10)
[문제62] x변수에 있는 값들중에 10을 삭제해주세요

x.remove(10)
[문제63] x변수에 1번색인위치에 2를 입력하세요.

x.insert(1,2)
[문제64] x변수에 1번색인값을 제거해주세요.

del x[1]
[문제65] x 변수에 첫번째 부터 세번째까지 값을 출력해주세요.

x[0:3]
[문제66] x 변수에 제일뒤에서 두개 값을 출력해주세요.

x[-2:]
[문제67] x 변수를 y변수에 대입한 후 y변수에 11을 추가한 후 x값도 확인 한 후 분석해주세요.

y = x
y.append(11)
x 
[1, 3, 5, 7, 9, 11] # x, y는 동일한 객체를 담고있기에 같이 변형됨
[문제68] x변수를 z변수에 복사하지만 고유한 변수로 생성해주시고 z변수에 13을 추가 해주세요.

z = x[:]
z.append(13)
[문제69]

x = [1,2,3]
y = [4,5,6]
y변수에 값을 x 변수에 넣어주세요.

x = [1,2,3]
y = [4,5,6]
x.extend(y)
[문제70] x 변수에 1번 인덱스의 값을 제거해주세요.

del x[1]
[문제71] x변수에 1번 부터 3번 인덱스를 제거해주세요.

del x[1:4]  
[문제72] 중첩리스트를 이용할때 첫번째 항목의 첫번째 항목의 값을 추출해주세요.

 x[0][0]
[문제73] 리스트형과 비슷하지만 요소의 값을 변경 할 수 없는 타입과 부호는 ?

튜플   
()   
[문제74] 키, 값을 저장하는 데이터 타입과 부호는 ?

딕셔너리   
{}    
[문제75] 아래와 같은 내용을 변수에 입력해주세요. 변수이름은 dict

이름 : '홍길동'
나이 : 30
직업 : '파이썬개발자'
dict = {'이름':'홍길동', '나이':30, '직업':'파이썬개발자'}
[문제76] dict변수 키를 출력하세요.

dict.keys()
[문제77] dict변수 값을 출력하세요.

dict.values()
[문제78] dict변수의 키, 값을 출력해주세요.

dict.items()
[문제79] dict변수의 이름만 출력해주세요.

dict['이름']
[문제80] dict변수의 주소 = '서울' 추가해주세요

dict['주소'] = '서울'
[문제81] dict변수의 나이값을 32 수정하세요.

dict['나이'] = 32
[문제82] 최대공약수를 재귀함수로 구현해보세요

 def gcd(a,b):
     if b == 0:
         return a
     else:
         return gcd(b, a%b)
[문제83] stddev(2,3,1,7) 표준편차를 구하세요. stddev함수를 생성하세요.

평균 = 관측값의 합 / 데이터수
편차 = 관측값 - 평균
편차 제곱합 = (편차**2)+(편차**2)
분산 = 편차제곱합/데이터수(자유도)
표준편차 = math.sqrt(분산)
import math
math.sqrt(분산)
# 하나의 함수로 작성
def stddev(*nums):
    avg = sum(nums)/len(nums)
    dev = [n-avg for n in nums]
    var = sum([n**2 for n in dev])/(len(nums)-1)
    import math
    return math.sqrt(var)
# 각각의 함수로 작성
def avg(*nums):
    return sum(nums)/len(nums)

def dev(*nums):
    return [n-avg(*nums) for n in nums]

def var(*nums):
    return sum([n**2 for n in dev(*nums)])/(len(nums)-1)

def stddev(*nums):
    import math
    return math.sqrt(var(*nums))
# 람다
def stddev(*nums):
    avg = lambda nums: sum(nums)/len(nums)
    dev = lambda nums: [n-avg(nums) for n in nums]
    var = lambda nums: sum([n**2 for n in dev(nums)])/(len(nums)-1)
    import math
    return math.sqrt(var(nums))
[문제84] stats 모듈에 평균, 분산, 표준편차함수를 사용할수 있는 프로그램을 생성하세요.

>>> import stats
>>> stats.mean(1,2,3,4,5)
3.0
>>> stats.variance(1,2,3,4,5)
2.5
>>> stats.stddev(1,2,3,4,5)
1.5811388300841898
# stats.py파일 생성
def mean(*nums):
    return sum(nums)/len(nums)

def dev(*nums):
    return [n-mean(*nums) for n in nums]

def variance(*nums):
    return sum([n**2 for n in dev(*nums)])/(len(nums)-1)

def stddev(*nums):
    import math
    return math.sqrt(variance(*nums))

# 실행
import sys
sys.path.append('c:\\python')
import stats
stats.mean(1,2,3,4,5)
stats.variance(1,2,3,4,5)
stats.stddev(1,2,3,4,5)

[문제85] 프로그램을 생성하세요.

액수입력 : 362
화폐단위를 입력하세요 : 100 50 1
1원 : 12개
50원 : 1개
100원 : 3개
total = int(input('액수입력 : '))
units = sorted(map(int, input('화폐단위를 입력하세요 : ').split()), reverse=True)
result = {}
for unit in units:
    result[unit] = total//unit
    total = total%unit
for unit in sorted(units):
    print('{}원 : {}개'.format(unit, result[unit]))
# 선생님 답
def coinGreedy(money, cash_type):
    cash_type.sort(reverse=True)  
    remain = money 
    res = {}  
    for cash in cash_type:
        dvmd = divmod(remain,cash)
        res[cash] = dvmd[0]
        remain = dvmd[1] 
    return res

money = int(input('액수입력 : '))
cash_type = [int(x) for x in input('화폐단위를 입력하세요 : ').split(' ')]
res = coinGreedy(money,cash_type)
for k,v in res.items():
    print('{0}원 : {1}개'.format(k,v))

# 딕셔너리 정렬
import operator
for k,v in sorted(res.items(), key=operator.itemgetter(0)):
    print('{0}원 : {1}개'.format(k,v))
for k,v in sorted(res.items(), key=operator.itemgetter(1)):
    print('{0}원 : {1}개'.format(k,v))
for k,v in sorted(res.items(), key=operator.itemgetter(0), reverse=True):
    print('{0}원 : {1}개'.format(k,v))
for k,v in sorted(res.items(), key=operator.itemgetter(1), reverse=True):
    print('{0}원 : {1}개'.format(k,v))
[문제86] 숫자를 입력값으로 받은 후 짝수인지 홀수 인지를 출력한후 그 숫자값을 기준으로 짝수면 짝수형식의 증가값으로 10개 출력, 홀수면 홀수형식의 증가값으로 10개 출력합니다. 만약에 숫자가 들어 오지 않으면 예외사항처리하세요.

숫자를 입력해주세요 : 10
짝수
10
12
14
16
18
20
22
24
26
28
>>> 

숫자를 입력해주세요 : 11
홀수
11
13
15
17
19
21
23
25
27
29

숫자를 입력해주세요 : 이십
invalid literal for int() with base 10: '이십'
숫자를 입력하세요
try:
    num = int(input('숫자를 입력해주세요 : '))
    if num%2 == 0:
        print('짝수')
    else:
        print('홀수')
    for i in range(10):
        print(num + (2*i))
except ValueError as error:
    print(error)
    print('숫자를 입력하세요')
except Exception as error:
    print(error)
    print('오류가 발생했습니다.')
[문제87] 오늘이 무슨 요일인지 출력해주세요.

import datetime
days = ['월','화','수','목','금','토', '일']
print(days[datetime.datetime.today().weekday()]+'요일')
[문제88] 함수의 인수값으로 현재 날짜, 일수 정보를 입력받아서 더한 날짜 정보를 리턴하는 next_day함수를 생성하세요.

def next_day(t, d):
    import datetime as dt
    try:
        result = dt.datetime.strftime(t+dt.timedelta(days=d), '%Y %m %d').split()
        print('{} 일 후의 날짜는 {} 년 {} 월 {} 일 입니다.'.format(d, result[0], result[1], result[2]))
        return result
    except Exception as error:
        print(error)
[문제89] 아래와 같은 결과가 출력될수 있도록 프로그램을 생성하세요

1에서 천만까지 짝수합, 홀수합 구합니다
1에서 천만까지 짝수합: 24999995000000
1에서 천만까지 홀수합: 25000000000000
처리시간 : 0:00:01.950003
처리시간 millisecond(1/1000)  : 1950ms
from datetime import datetime as dt
start = dt.now()
print('1에서 천만까지 짝수합, 홀수합 구합니다')
odd_sum = 0
even_sum = 0
for i in range(1, 10000001): 
    if i%2 ==0:
        even_sum += i
    else:
        odd_sum += i

end = dt.now()
delta = end - start
print('1에서 천만까지 짝수합:', even_sum)
print('1에서 천만까지 홀수합:', odd_sum)
print('처리시간 :', delta)
print('처리시간 millisecond(1/1000) : {}ms'.format(round(delta.total_seconds()*1000)))

[문제90] last_name, salary 출력해주세요

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    for line in emp_csv:
        print(line[2], line[7])
[문제91] last_name, last_name 길이를 출력해주세요

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        print(line[2], len(line[2]))
[문제92] employee_id, last_name, salary∗12 를 출력해주세요

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        print(line[0], line[2], int(line[7])*12)
[문제93] last_name, commission_pct를 출력하되 commission_pct값이 ''이면 0으로 출력해주세요

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        comm = line[8]
        if len(comm)==0:
            comm = 0
        print(line[2], comm)
[문제94] last_name을 대문자로, job_id를 소문자로 출력해주세요

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        print(line[2].upper(), line[6].lower())
[문제95] last_name을 첫글자만 추출해서 소문자로 출력해주세요.

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        print(line[2][0].lower())
[문제96] last_name을 두번째부터 마지막까지만 추출해서 대문자로 출력해주세요.

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        print(line[2][1:-1].upper())
[문제97] 이름을 입력하면 첫글자는 대문자 나머지는 소문자를 출력하는 initcap함수를 이용해 이름을 출력하세요

def initcap(x):
    return x[0].upper()+x[1:].lower()
[문제98] 이름을 입력하면 제일 뒤에 있는 철자는 대문자, 앞의 문자는 소문자로 출력하는 tailcap 함수를 생성하세요.

def tailcap(x):
    return x[:-1].lower()+x[-1].upper()
[문제99] 이름과 급여를 출력하는데 급여를 출력할 때 0 대신 ∗를 출력하세요

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        print(line[2], line[7].replace('0','*'))
[문제100] 이름, salary * 12 + commission_pct 결과를 출력해주세요.

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        comm = line[8]
        if len(comm)==0:
            comm = 0
        else:
            comm = float(comm)
        print(line[2], int(line[7])*(12+comm))
[문제101] 이름, 입사한 요일(한글)을 출력해주세요

import csv
def whatday(date):
    import datetime as dt
    days = ['월','화','수','목','금','토','일']
    day = dt.datetime.strptime(date, '%Y%m%d')
    return days[day.weekday()]

with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:        
        print(line[2], whatday(line[5]))
[문제102] 이름, 입사한 날짜부터 오늘까지 총 몇일 근부했는지 출력하세요

import csv
import datetime as dt
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        today = dt.datetime.today()
        hire = dt.datetime.strptime(line[5],'%Y%m%d')
        print(line[2], (today-hire).days)
import csv
import datetime as dt
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        today = dt.datetime.today()
        hire = dt.datetime.strptime(line[5],'%Y%m%d')
        print(line[2], (str(today-hire).split())[0]+'일')
[문제103]오늘 부터 이번달 말일까지 몇일 남았는지 출력하세요

import calendar as cld
import datetime as dt
today = dt.date.today()
last = cld.monthrange(today.year, today.month)[1]
print(last-today.day)
[문제104] 사원번호가 100번 사원의 사원이름과 급여를 출력하세요.

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    for line in emp_csv:
        if line[0]=='100':
            print(line[2], line[7])
[문제105] 급여가 10000 이상인 사원들의 이름과 급여를 출력하세요.

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if int(line[7])>=10000:
            print(line[2], line[7])
[문제106] 2001-01-13일에 입사한 사원의 이름과 입사일을 출력하세요

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if line[5] == '20010113':
            print(line[2], line[5])
import csv
import datetime as dt

with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if dt.datetime.strptime(line[5],'%Y%m%d').year == dt.datetime.strptime('2001-01-13', '%Y-%m-%d').year:
            print(line[2], line[5])
[문제107] 2002 년도에 입사한 사원들의 이름과 입사일을 출력하세요.

import csv
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if line[5][:4] == '2002':
            print(line[2], line[5])
import csv
import datetime as dt

with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if dt.datetime.strptime(line[5],'%Y%m%d').year == dt.datetime.strptime('2002', '%Y').year:
            print(line[2], line[5])
[문제108] job이 ST_CLERK 이고 월급 3000 이상인 사원들의 이름과 job, 급여 출력하세요

import csv
import datetime as dt
total = 0
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if line[6] == 'ST_CLERK' and int(line[7]) >= 3000:
            print(line[2], line[6], line[7])
            total += 1
print('결과는 총 {} 건 입니다.'.format(total))
[문제109] 급여가 2500 에서 3000 사이인 사원들의 이름과 급여를 출력하세요

import csv
import datetime as dt
total = 0
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if 2500 <= int(line[7]) <= 3000:
            print(line[2], line[7])
            total += 1
print('결과는 총 {} 건 입니다.'.format(total))
[문제110] job AD_VP , AD_PRES 인 사원들의 이름과 월급과 직업을 출력하세요

import csv
import datetime as dt
total = 0
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if line[6] in ['AD_VP','AD_PRES']:
            print(line[2], line[6], line[7])
            total += 1
print('결과는 총 {} 건 입니다.'.format(total))
[문제111] 직업이 AD_VP , AD_PRES 이 아닌 사원들의 이름과 월급과 직업을 출력하세요

import csv
import datetime as dt
total = 0
with open('c:/data/emp.csv', 'r') as file:
    emp_csv = csv.reader(file)
    next(emp_csv)
    for line in emp_csv:
        if line[6] not in ['AD_VP','AD_PRES']:
            print(line[2], line[6], line[7])
            total += 1
print('결과는 총 {} 건 입니다.'.format(total))

[문제112] 커미션이 null 인 사원의 이름, 급여, 커미션을 출력하세요. 전체 인원수, 커미션 null의 수, 비율도 출력하세요.

import csv
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    emp = csv.reader(file)
    total = 0
    comm_null = 0
    next(emp)
    for line in emp:
        total += 1
        if len(line[8]) == 0:
            print('{} 사원 정보\n 급여: {}\n 커미션: {}%'.format(line[2], line[7], 0))
            comm_null += 1

    print('*'*50)
    print('총 사원: {}명\n커미션이 없는 사원: {}명, (전체의 {}%)\n'.format(total, comm_null, round(((comm_null/total)*100), 2)))
[문제113]커미션이 null 이 아닌 사원들의 이름,급여,커미션을 출력하세요. 전체 인원수, 커미션 null이 아닌 수, 비율도 출력하세요.

import csv
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    emp = csv.reader(file)
    total = 0
    comm = 0
    next(emp)
    for line in emp:
        total += 1
        if len(line[8]) != 0:
            print('{} 사원 정보\n 급여: {}\n 커미션: {}%'.format(line[2], line[7], line[8]))
            comm += 1

    print('*'*50)
    print('총 사원: {}명\n커미션을 받는 사원: {}명, (전체의 {}%)\n'.format(total, comm, round(((comm/total)*100), 2)))
[문제114] last_name의 첫번째 철자가 S 로 시작하는 사원들의 이름과 급여를 출력하세요. 전체 인원수, 조건의 수, 비율도 출력하세요.

import csv
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    emp = csv.reader(file)
    total = 0
    first_S = 0
    next(emp)
    for line in emp:
        total += 1
        if line[2][0] == 'S':
            print('{} 사원의 급여: {}'.format(line[2], line[7]))
            first_S += 1

    print('*'*50)
    print('총 사원: {}명\n이름이 S로 시작하는 사원: {}명, (전체의 {}%)\n'.format(total, first_S, round(((first_S/total)*100), 2)))
[문제115] last_name의 두번째 철자가 i 인 사원들의 이름과 월급을 출력하세요. 전체 인원수, 조건의 수, 비율도 출력하세요.

import csv
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    emp = csv.reader(file)
    total = 0
    second_i = 0
    next(emp)
    for line in emp:
        total += 1
        if line[2][1] == 'i':
            print('{} 사원의 급여: {}'.format(line[2], line[7]))
            second_i += 1

    print('*'*50)
    print('총 사원: {}명\n이름의 두번째가 i인 사원: {}명, (전체의 {}%)\n'.format(total, second_i, round(((second_i/total)*100), 2)))
[문제116] 50번부서 사원들의 이름, 급여 출력하는데 이름을 오름차순으로 출력하세요.

import csv
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    emp = csv.reader(file)
    dept_50 = {}
    next(emp)
    for line in emp:
        if line[10] == '50':
            if line[2] not in dept_50.keys():
                dept_50[line[2]] = line[7]
            else:
                print('중복된 이름이 있습니다!!\n중복된 이름을 수정하여 추가합니다.')
                dept_50[line[2]+'_1'] = line[7]

for name in sorted(dept_50):
    print('{} 사원의 급여는 {} 입니다.'.format(name, dept_50[name]))
# 선생님 답
import csv
from operator import imtemgetter
file = open('c:\data\emp.csv','r')
emp_csv = csv.reader(file)
next(emp_csv)
emp_list = []
for i in emp_csv:
    if i[10] = '50':
        emp_list.append(i)

emp_list_sorted = sorted(emp_list, reverse=False, key=itemgetter(2))
for i in emp_list_sorted:
    print(i[2], i[5])
[문제117] job이 ST_CLERK인 사원들의 이름과 입사일과 job을 출력하는데 가장 최근에 입사한 사원부터 출력하세요.

import csv
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    emp = csv.reader(file)
    job_ST_CLERK = {}
    next(emp)
    for line in emp:
        if line[6] == 'ST_CLERK':
            if line[2] not in job_ST_CLERK.keys():
                job_ST_CLERK[line[2]] = [line[5], line[6]]
            else:
                print('중복된 이름이 있습니다!!\n중복된 이름을 수정하여 추가합니다.')
                job_ST_CLERK[line[2]+'_1'] = [line[5], line[6]]

for name in sorted(job_ST_CLERK, reverse=True, key=lambda x: job_ST_CLERK[x][0]):
    hire = job_ST_CLERK[name][0]
    print('{} 사원은 {}년 {}월 {}일에 {}으로 채용되었습니다.'.format(name, hire[:4], hire[4:6], hire[6:], job_ST_CLERK[name][1]))
[문제118] 부서별 급여의 총액을 구하세요.

import csv
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    emp = csv.reader(file)
    dept_sal = {}
    next(emp)
    for line in emp:
        sal = int(line[7])
        if len(line[10]) ==0:
            deptid = 0
        else:
            deptid = int(line[10])

        if deptid not in dept_sal.keys():
            dept_sal[deptid] = sal
        else:
            dept_sal[deptid] += sal
for deptid in sorted(dept_sal):
    print('{} 부서의 총 급여: {}'.format(deptid, dept_sal[deptid]))
[문제119] 부서별 급여의 총액을 구하세요. 부서별로 오름차순 정렬하세요.

10 4400
20 19000
30 24900
40 6500
50 156400
60 28800
70 10000
80 304500
90 63040
100 51608
110 20308
non 7000
import csv
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    emp = csv.reader(file)
    dept_sal = {}
    next(emp)
    for line in emp:
        sal = int(line[7])
        if len(line[10]) ==0:
            deptid = 999
        else:
            deptid = int(line[10])

        if deptid not in dept_sal.keys():
            dept_sal[deptid] = sal
        else:
            dept_sal[deptid] += sal

for deptid in sorted(dept_sal):
    if deptid == 999:
        print('non 부서의 총 급여: {}'.format(dept_sal[deptid]))
    else:
        print('{} 부서의 총 급여: {}'.format(deptid, dept_sal[deptid]))
[문제120] 단어, 알파벳을 입력값으로 넣어서 단어 안에 알파벳 수를 출력하세요

<화면예>
wordF('happy','p')
2
def wordF(word, char):
    result = 0
    for c in word:
        if c == char:
            result += 1
    print(result)
[문제121] 단어를 입력값으로 넣어서 알파벳을 출력하는데 중복되는 알파벳은 하나만 출력하세요.

alphaF('happy')
['h', 'a', 'p', 'y']

alphaF('intelligence')
['i', 'n', 't', 'e', 'l', 'g', 'c']
def alphaF(word):
    result = []
    for c in word:
        if c not in result:
            result.append(c)
    print(result)
[문제122] 단어 철자의 빈도수를 출력하세요.

alphaF('intelligence')
{'i': 2, 'n': 2, 't': 1, 'e': 3, 'l': 2, 'g': 1, 'c': 1}

alphaF('happy')
{'h': 1, 'a': 1, 'p': 2, 'y': 1}
def alphaF(word):
    result = {}
    for c in word:
        if c not in result:
            result[c] = 1
        else:
            result[c] += 1
    print(result)

[문제123] 아래와 같은 모양의 표를 생성하세요.

      PYTHON   R  SQL
2014      60  90   50
2015      80  65   75
2016      70  75   85
from pandas import DataFrame

data = {'PYTHON':{2014:60, 2015:80, 2016:70}, 'R':{2014:90, 2015:65, 2016:75}, 'SQL':{2014:50, 2015:75, 2016:85}}
ann_score = DataFrame(data)
# 선생님 답
frame = DataFrame({'PYTHON':[60, 80, 70], 'SQL':[50, 75, 85], 'R':[90, 65, 75]}, index = ['2014', '2015', '2016'])
[문제124] 'PYTHON' 열을 선택하세요

ann_score['PYTHON']
[문제125] '2014' 행 정보를 출력하세요.

ann_score.loc[2014]
ann_score.ix[2014]
[문제126] 인덱스번호를 기준으로 1부터 2번까지 출력하세요.

ann_score.iloc[1:3]
ann_score[1:3]
ann_score.ix[1:3]
[문제127] PYTHON의 값을 기준으로 60보다 큰값을 가지고 있는 행 정보를 출력하세요.

ann_score[ann_score['PYTHON']>60]
[문제128] PYTHON의 값을 기준으로 60 보다 큰값을 가지고 있는 PYTHON 정보만 출력하세요.

ann_score['PYTHON'][ann_score['PYTHON']>60]
ann_score.ix[ann_score['PYTHON']>60, 'PYTHON']
ann_score.ix[ann_score['PYTHON']>60, 0]
ann_score.loc[ann_score['PYTHON']>60, 'PYTHON']
[문제129] '2015' 행값 중에 PYTHON 정보만 출력하세요

ann_score.loc[2015, 'PYTHON']
[문제130] '2015' 행값 중에 PYTHON, R 정보 출력하세요

ann_score.loc[2015, ['PYTHON', 'R']]
ann_score.ix[2015, ['PYTHON', 'R']]
[문제131] 'R' 열 정보를 출력하세요.

ann_score['R']
ann_score.ix[:, 'R']
ann_score.loc[:, 'R']
[문제132]PYTHON 점수가 80 이상 또는 SQL 점수가 90 이상인 데이터 출력하세요.

ann_score[(ann_score['PYTHON']>=80)|(ann_score['SQL']>=90)]
[문제133] PYTHON 점수가 80 이상 이고 SQL 점수 90 이상인 데이터 출력하세요.

ann_score[(ann_score['PYTHON']>=80)&(ann_score['SQL']>=90)]
[문제134] 직업이 ST_CLERK인 사원의 LAST_NAME, SALARY, JOB_ID를 출력해주세요.

import pandas as pd
emp = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
emp[emp.JOB_ID=='ST_CLERK'][['LAST_NAME', 'SALARY', 'JOB_ID']]

[문제134] emp.csv 파일의 데이터를 판다스를 이용해서 읽어 들인 후 급여가 10000 이상인 사원들의 이름, 급여, 입사일을 출력해주세요.
```python
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[file.SALARY >= 10000][['LAST_NAME', 'SALARY', 'HIRE_DATE']]
```
[문제135] 급여 10000 이상인 사원들의 이름과 급여, 입사일를 출력하세요. 급여를 기준으로 내림차순하세요.
```python
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[file.SALARY >= 10000][['LAST_NAME', 'SALARY', 'HIRE_DATE']].sort_values(by='SALARY', axis=0, ascending=False)
```
[문제136] 급여를 많이 받는 순으로 10위 까지를 구하세요. 
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
# 정렬만 사용
file.sort_values(by='SALARY', ascending=False)[:10]

# rank로 구한 뒤 정렬
file[file.SALARY.rank(ascending=False, method='first') <= 10].sort_values(by='SALARY', ascending=False)
```
```python
# 선생님 답
emp[emp['SALARY'].rank(ascending=False, method='dense')<=10][['EMPLOYEE_ID', 'LAST_NAME', 'SALARY']]

emp['rank'] = emp['SALARY'].rank(ascending=False, method='dense')
emp[emp['rank'] <= 10].sort_values('rank')
```
[문제137] 직업이 AD_VP, AD_PRES 인 사원들의 이름, 급여, 직업을 출력하세요.
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')

file[file.JOB_ID.isin(['AD_VP', 'AD_PRES'])][['LAST_NAME', 'SALARY', 'JOB_ID']]
```

[문제138] 직업이 AD_VP ,AD_PRES 아닌 사원들의 이름, 급여, 직업을 출력하세요.
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')

file[~file.JOB_ID.isin(['AD_VP', 'AD_PRES'])][['LAST_NAME', 'SALARY', 'JOB_ID']]
```

[문제139] 커미션이 null인 사원의 이름, 커미션을 출력하세요.
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[file.COMMISSION_PCT.isnull()][['LAST_NAME', 'COMMISSION_PCT']].fillna(0)
```

[문제140] 커미션이 null이 아닌 사원의 이름, 커미션을 출력하세요.
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
# notnull()
file[file.COMMISSION_PCT.notnull()][['LAST_NAME', 'COMMISSION_PCT']]

# ~ + isnull()
file[~file.COMMISSION_PCT.isnull()][['LAST_NAME', 'COMMISSION_PCT']]
```

[문제141] last_name 첫 글자가 S로 시작되는 사원들의 last_name을 출력하세요
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[file.LAST_NAME.apply(lambda x: x.startswith('S'))].LAST_NAME
```

[문제142] last_name이 g로 끝나는 사원들의 이름, 급여 출력하세요.
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[file.LAST_NAME.apply(lambda x: x.endswith('g'))][['LAST_NAME', 'SALARY']]
```

[문제143] 110번 사원의 급여보다 많이 받는 사원들의 이름, 급여를 출력하세요.
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[file.SALARY > int(file[file.EMPLOYEE_ID == 110].SALARY)][['LAST_NAME', 'SALARY']]
```

[문제144] 관리자 사원의 이름, 입사일, 급여를 출력하세요.
```python
import pandas as pd
import numpy as np
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[file.EMPLOYEE_ID.isin(set(file.MANAGER_ID.dropna().apply(int)))][['LAST_NAME', 'HIRE_DATE','SALARY']]
```
```python
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as emp:
    mgr = []
    next(emp)
    for line in emp:
        m_id = line.split(',')[9]
        if len(m_id) > 0:
            mgr.append(m_id)
    mgr = list(set(mgr))
    
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as emp:    
    for line in emp:
        data = line.split(',')
        if data[0] in mgr:
            print('관리자 {}의 입사일은 {}, 급여는 {} 입니다.'.format(data[2], data[5], data[7]))
```

[문제145] 101번 사원의 관리자 이름, 입사일, 급여정보를 출력하세요.

pandas를 이용해서 해결
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
mgr, hire, salary = file[file.EMPLOYEE_ID == 101][['MANAGER_ID', 'HIRE_DATE','SALARY']].values[0]
mgr = file[file.EMPLOYEE_ID == mgr].LAST_NAME
pd.DataFrame({'사원번호':101, '관리자이름':mgr, '입사일':int(hire), '급여정보':int(salary)})
일반적으로 csv 파일을 읽어서 해결
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    next(file)
    for line in file:
        data = line.split(',')
        if data[0] == '101':
            mgr = data[9]
            hire = data[5]
            salary = data[7]
            break

with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    next(file)
    for line in file:
        data = line.split(',')
        if data[0] == mgr:
            print('101번 사원의 입사일은 {}, 급여는 {}, 관리자는 {} 입니다.'.format(hire, salary, data[2]))  
            break
[문제146] 최고 급여, 최저 급여 출력하세요.

# pandas
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
print('최고급여: {}\n최저급여: {}'.format(max(file.SALARY), min(file.SALARY)))
# 
maxsal = 0
minsal = 99999
with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
    next(file)
    for line in file:
        sal = int(line.split(',')[7])
        if  sal > maxsal:
            maxsal = sal
        if sal < minsal:
            minsal = sal

print('최고급여: {}\n최저급여: {}'.format(maxsal, minsal))
[문제147] 20번 부서 사원들의 급여 합을 구하세요.

# pandas
import pandas as pd
file = pd.read_csv('C:/data/emp_new.csv', names=['empid', 'name','job','mgr','hire_date', 'sal','comm','deptno'])
print('20번 부서 급여합:',file[file.deptno == 20].sal.sum())
d20_sumsal = 0
with open('C:/data/emp_new.csv', 'r') as file:
    for line in file:
        if  line.split(',')[-1] == '20\n':
            d20_sumsal += int(line.split(',')[5])
print('20번 부서 급여합:', d20_sumsal)
[문제148] 부서번호를 입력하면 그 부서의 급여 총액을 구하는 함수를 생성하세요.

dept_sum_sal()
부서번호를 입력하세요 :  20
19000.0

dept_sum_sal()
부서번호를 입력하세요 :  30
24900.0
# pandas
def dept_sum_sal():    
    import pandas as pd
    deptid = int(input('부서번호를 입력하세요 :'))
    file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
    print(file[file.DEPARTMENT_ID == deptid].SALARY.sum())
def dept_sum_sal():
    deptid = input('부서번호를 입력하세요 :')
    dept_sumsal = 0
    with open('C:/Users/stu/git/DA_Academy/emp_new.csv', 'r') as file:
        for line in file:
            if  line.split(',')[-1] == deptid+'\n':
                dept_sumsal += int(line.split(',')[7])
    print(dept_sumsal)
[문제149] 직업을 물어보게하고 직업을 입력하면 해당 직업의 최고 급여를 출력되게하는데 아무것도 입력하지 않으면 계속 물어보게하는 프로그램을 작성하세요.

job_max_sal()
직업을 입력하세요 ?  ST_CLERK
3600.0

job_max_sal()
직업을 입력하세요 ? sa_rep
11500.0

job_max_sal()
직업을 입력하세요 ? 
직업을 입력하세요 ? 
직업을 입력하세요 ? 

job_max_sal()
직업을 입력하세요 ? sales
해당 직업의 사원은 없습니다.
def job_max_sal():
    import pandas as pd

    j_id = ''
    while not len(j_id):
        j_id = input('직업을 입력하세요:').upper()    

    file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
    try:
        result = max(file[file.JOB_ID==j_id].SALARY)
    except ValueError:
        print('해당 직업의 사원은 없습니다.')
    except Exception as error:
        print(error)
    else:
        return result
[문제150]부서번호,급여를 기준으로 내림차순 정렬해서 아래 화면처럼 컬럼정보를 출력하세요.

     deptno  empid         name      sal
105   110.0    205      Higgins  12008.0
106   110.0    206        Gietz   8300.0
8     100.0    108    Greenberg  13208.8
9     100.0    109       Faviet   9900.0
10    100.0    110         Chen   8200.0
12    100.0    112        Urman   7800.0
11    100.0    111      Sciarra   7700.0
13    100.0    113         Popp   6900.0
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[['DEPARTMENT_ID', 'EMPLOYEE_ID', 'LAST_NAME', 'SALARY']].sort_values(by=['DEPARTMENT_ID', 'SALARY'],ascending=False)
[문제151] index 번호 0부터 50까지 부서번호, 급여를 기준으로 내림차순 정렬한 후 아래결과처럼 출력하세요.

    deptno  empid         name      sal
8    100.0    108    Greenberg  13208.8
9    100.0    109       Faviet   9900.0
10   100.0    110         Chen   8200.0
12   100.0    112        Urman   7800.0
11   100.0    111      Sciarra   7700.0
13   100.0    113         Popp   6900.0
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[['DEPARTMENT_ID', 'EMPLOYEE_ID', 'LAST_NAME', 'SALARY']][0:51].sort_values(by=['DEPARTMENT_ID', 'SALARY'],ascending=False)
[문제152] 50번 부서 사원들의 정보를 급여를 기준으로 내림차순 정렬해서 해서 아래 화면처럼 컬럼정보를 출력하세요.

   empid         name  deptno     sal
21    121        Fripp    50.0  8200.0
20    120        Weiss    50.0  8000.0
22    122     Kaufling    50.0  7900.0
23    123      Vollman    50.0  6500.0
24    124      Mourgos    50.0  5800.0
84    184     Sarchand    50.0  4200.0
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file[file.DEPARTMENT_ID==50][['EMPLOYEE_ID', 'LAST_NAME','DEPARTMENT_ID', 'SALARY']].sort_values(by='SALARY',ascending=False)
[문제153] 10,20,30,40,50번 부서 사원들의 급여의 총액을 출력하세요.

<화면출력>
10 4400.0
20 19000.0
30 24900.0
40 6500.0
50 156400.0
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
for deptid in range(10, 51, 10):
    print(deptid, sum(file[file.DEPARTMENT_ID == deptid].SALARY))
[문제154] s 변수에 값들 중에 unique한 값만 s_unique 변수에 넣어주세요. s = [1,2,3,4,1,2,3,4,5,1,2,3,4,5,6,'']

# Null 포함
s_unique = []
s = [1,2,3,4,1,2,3,4,5,1,2,3,4,5,6,'']
for n in s:
    if n not in s_unique:
        s_unique.append(n)
# Null 제외
s_unique = []
s = [1,2,3,4,1,2,3,4,5,1,2,3,4,5,6,'']
for n in s:
    if n != '' and n not in s_unique:
        s_unique.append(n)   
# 빈도수 체크 / Null 포함
s_unique = {}
s = [1,2,3,4,1,2,3,4,5,1,2,3,4,5,6,'']
for n in s:
    if n not in s_unique:
        s_unique[n] = 1
    else:
        s_unique[n] += 1
# 빈도수 체크 / Null 제외
s_unique = {}
s = [1,2,3,4,1,2,3,4,5,1,2,3,4,5,6,'']
for n in s:
    if n == '':
        continue
    elif n not in s_unique:
        s_unique[n] = 1
    else:
        s_unique[n] += 1
# 빈도수의 상대비율 / Null 제외
s_unique = {}
s = [1,2,3,4,1,2,3,4,5,1,2,3,4,5,6,'']
for n in s:
    if n == '':
        continue
    elif n not in s_unique:
        s_unique[n] = 1
    else:
        s_unique[n] += 1

total = sum(s_unique.values())        
for i in s_unique:
    print(i, s_unique[i]/total)    
[문제155] 부서별로 급여 총액을 출력하세요.

<화면 출력>
10 4400.0
20 19000.0
30 24900.0
40 6500.0
50 156400.0
60 28800.0
70 10000.0
80 304500.0
90 58000.0
100 53708.8
110 20308.0
import pandas as pd
file = pd.read_csv('C:/data/emp_new.csv', names=['empid', 'name','job','mgr','hire_date', 'sal','comm','deptno'])
deptids = sorted(list(file.deptno.dropna().unique()))
for deptid in deptids:
    print(deptid, sum(file[file.deptno == deptid].sal))

[문제156]부서별로 급여 총액을 출력하세요.

<화면 출력>
10 4400.0
20 19000.0
30 24900.0
40 6500.0
50 156400.0
60 28800.0
70 10000.0
80 304500.0
90 58000.0
100 53708.8
110 20308.0
nan 7000.0
import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
for deptid in sorted(file.DEPARTMENT_ID.unique()):
    if pd.isnull(deptid):
        print(deptid, sum(file[pd.isnull(file.DEPARTMENT_ID)].SALARY))
    else:
        print(deptid, sum(file[file.DEPARTMENT_ID==deptid].SALARY))
[문제157] 년도별로 입사한 인원수 결과를 출력해주세요.

import pandas as pd
file = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new.csv')
file.HIRE_DATE.groupby(file.HIRE_DATE.apply(lambda x: str(x)[0:4])).count()
# 선생님 답
from pandas import Series, DataFrame
import pandas as pd
import numpy as np

emp = pd.read_csv("c:\data\emp_new.csv", names = ['empid','name','job','mgr','hire_date','sal','comm','deptno'])
emp.dtypes
print(emp.groupby(emp['hire_date'].str.slice(0,4))['empid'].count())
print(emp.groupby(pd.to_datetime(emp['hire_date']).dt.year)['empid'].count())
pd.to_datetime(emp['hire_date']).dt
pd.to_datetime(emp['hire_date']).dt.year
pd.to_datetime(emp['hire_date']).dt.month
pd.to_datetime(emp['hire_date']).dt.day
pd.to_datetime(emp['hire_date']).apply(lambda x: x.year)
pd.to_datetime(emp['hire_date']).apply(lambda x: x.month)

pd.to_datetime(Series('2018-09-19 11:01:30')).dt.year
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.month
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.day
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.hour
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.minute
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.second
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.quarter
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.dayofweek #(월요일=0, 일요일=6)
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.dayofyear
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.date
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.time
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.week
pd.to_datetime(Series('2018-09-19 11:01:30')).dt.days_in_month
[문제158] emp_new.csv 를 emp리스트 변수안에 아래 모양과 같은 딕셔너리 데이터 유형에 데이트를 입력한 후 출력하세요.

{'empno': 100, 'ename': King, 'job': AD_PRES, 'mgr': '', 'hiredate': 2003-06-17, 'sal': 24000, 'comm': '', 'deptno': 90}

100 King AD_PRES  2003-06-17 24000  90
101 Kochhar AD_VP 100 2005-09-21 17000  90
102 De Haan AD_VP 100 2001-01-13 17000  90
103 Hunold IT_PROG 102 2006-01-03 9000  60
104 Ernst IT_PROG 103 2007-05-21 6000  60
with open('c:/data/emp_new.csv','r') as file:
    emp = []
    for line in file:
        data = line.strip().split(',')
        emp.append({'empno':data[0], 'ename':data[1], 'job':data[2], 'mgr':data[3], 
                'hiredate':data[4], 'sal':data[5], 'comm':data[6], 'deptno':data[7]})

for line in emp:
    print((' '.join(line.values())).replace('"','')) 
[문제159] emp_new.csv, dept_new.csv 파일을 읽어서 사원의 이름, 부서 이름을 출력하세요.

with open('C:/Users/stu/git/DA_Academy/emp_new_1.csv','r') as file:
    emp = []
    for line in file:
        data = line.strip().split(',')
        emp.append({'empno':data[0], 'ename':data[1], 'job':data[2], 'mgr':data[3], 
                'hiredate':data[4], 'sal':data[5], 'comm':data[6], 'deptno':data[7]})

with open('C:/Users/stu/git/DA_Academy/dept_new.csv','r') as file:
    dept = {}
    for line in file:
        data = line.strip().split(',')
        dept[data[0]] = data[1]

for data in emp:
    if data['deptno'] == '':
        print('{} 사원은 소속 부서가 없습니다.'.format(data['ename']))
    else:
        print('{} 사원은 {} 부서에 속해있습니다.'.format(data['ename'], dept[data['deptno']]))
# 선생님답
import  csv
empfile = open("c:\data\emp_new.csv",'r')
deptfile = open("c:\data\dept_new.csv",'r')
emp_csv = csv.reader(empfile)
dept_csv = csv.reader(deptfile)

emp =[]  
dept =[]

for i in  dept_csv:
    dept.append({'deptno':i[0],'dname':i[1],'mgr':i[2],'loc':i[3]})

for j in emp_csv:
    emp.append({'empno':j[0],'ename':j[1],'job':j[2],'mgr':j[3], 'hiredate':j[4],'sal':j[5],'comm':j[6],'deptno':j[7]})


for d in dept:
   for e in emp:
        if e['deptno'] == d['deptno']:
            print ( e['ename'], d['dname'])


empfile.close()
deptfile.close()
[문제160] 사원들의 이름, 부서 이름을 출력하면서 소속부서가 없는 사원도 출력해주세요. 마지막에는 총건수도 출력하세요.

select  e.last_name, d.department_name from employees e left outer join departments d on e.department_id = d.department_id
select e.last_name, d.department_name from employees e, departments d where e.department_id = d.department_id(+)
with open('C:/Users/stu/git/DA_Academy/emp_new_1.csv','r') as file:
    emp = []
    for line in file:
        data = line.strip().split(',')
        emp.append({'empno':data[0], 'ename':data[1], 'job':data[2], 'mgr':data[3], 
                'hiredate':data[4], 'sal':data[5], 'comm':data[6], 'deptno':data[7]})

with open('C:/Users/stu/git/DA_Academy/dept_new.csv','r') as file:
    dept = {}
    for line in file:
        data = line.strip().split(',')
        dept[data[0]] = data[1]

for data in emp:
    if data['deptno'] == '':
        print('{} 사원은 소속 부서가 없습니다.'.format(data['ename']))
    else:
        print('{} 사원은 {} 부서에 속해있습니다.'.format(data['ename'], dept[data['deptno']]))

print('총 사원수:', len(emp))        
# 선생님답
import  csv
empfile = open("c:\data\emp_new.csv",'r')
deptfile = open("c:\data\dept_new.csv",'r')
emp_csv = csv.reader(empfile)
dept_csv = csv.reader(deptfile)

emp = []  
dept =[]

for i in  dept_csv:
    dept.append({'deptno':i[0],'dname':i[1],'mgr':i[2],'loc':i[3]})

for j in emp_csv:
    emp.append({'empno':j[0],'ename':j[1],'job':j[2],'mgr':j[3], 'hiredate':j[4],'sal':j[5],'comm':j[6],'deptno':j[7]})

cn = 0
for e in emp:
    if e['deptno'] == '':
        print(e['ename'])
        cn += 1
    else:
        for d in dept:
            if e['deptno'] == d['deptno']:
               print ( e['ename'], d['dname'])
               cn += 1

print(cn)

empfile.close()
deptfile.close()
[문제161] emp_new.csv, dept_new.csv 파일 데이터에서 50번 부서 사원의 중에 급여가 5000 이상인 사원의 이름, 부서 이름을 출력하세요.

import pandas as pd
from pandas import Series, DataFrame

emp=pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new_1.csv', 
                names=['empid','name','job','mgr','hire_date','sal','comm', 'deptno'])

dept = pd.read_csv('C:/Users/stu/git/DA_Academy/dept_new.csv', 
                  names=['deptno','dname','mgr','loc'])

pd.merge(emp[(emp.deptno == 50)&(emp.sal >= 5000)], dept, on='deptno')[['name', 'dname']]
[문제162] 2002년도에 근무한 사원들의 이름, 급여, 입사일, 부서코드,부서이름을 출력하세요.

import pandas as pd
from pandas import Series, DataFrame

emp=pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new_1.csv', 
                names=['empid','name','job','mgr','hire_date','sal','comm', 'deptno'])

dept = pd.read_csv('C:/Users/stu/git/DA_Academy/dept_new.csv', 
                  names=['deptno','dname','mgr','loc'])

pd.merge(emp[emp.hire_date.apply(lambda x: x[0:4]) == '2002'], dept, 
         on='deptno')[['name','sal','hire_date','deptno', 'dname']]
# 선생님 답
pd.merge(emp[emp.hire_date.str.slice(0,4) == '2002'], dept, 
         on='deptno')[['name','sal','hire_date','deptno', 'dname']]

from datetime import datetime
pd.merge(emp[pd.to_datetime(emp.hire_date).dt.year == datetime.strptime('2002', '%Y').year], dept, 
         on='deptno')[['name','sal','hire_date','deptno', 'dname']]
[문제163] 직업이 AD_VP, AD_PRES 인 사원들의 이름, 급여, 직업, 부서코드, 부서이름 을 출력하세요.

import pandas as pd
from pandas import Series, DataFrame

emp=pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new_1.csv', 
                names=['empid','name','job','mgr','hire_date','sal','comm', 'deptno'])

dept = pd.read_csv('C:/Users/stu/git/DA_Academy/dept_new.csv', 
                  names=['deptno','dname','mgr','loc'])

pd.merge(emp[emp.job.isin(['AD_VP', 'AD_PRES'])], dept, 
         on='deptno')[['name','sal','job','deptno', 'dname']]
[문제164] 부서이름별 총액 급여를 출력하세요.

import pandas as pd
from pandas import Series, DataFrame

emp=pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new_1.csv', 
                names=['empid','name','job','mgr','hire_date','sal','comm', 'deptno'])

dept = pd.read_csv('C:/Users/stu/git/DA_Academy/dept_new.csv', 
                  names=['deptno','dname','mgr','loc'])

total = emp.sal.groupby(emp.deptno).sum()
df = DataFrame({'deptno':total.index, 'sumsal':total.values})

pd.merge(df, dept[['deptno', 'dname']], on='deptno')[['dname', 'sumsal']]

[문제165] emp_new.csv 파일 데이터에 커미션 정보를 분석하려 합니다. 커미션에 null값들의 수, null이 아닌값들의 수를 구하세요.

일반적으로 csv file을 읽어서 해결

with open('C:/Users/stu/git/DA_Academy/emp_new_1.csv', 'r') as emp:
 comm = 0
 nocomm = 0
 for line in emp:
     data = line.split(',')
     if len(data[6]) > 0:
         comm += 1
     else:
         nocomm += 1

 print('커미션을 받는 사원: {}명\n커미션을 받지 않는 사원: {}명'.format(comm, nocomm))
pandas를 이용해서 해결
import pandas as pd
emp = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new_1.csv', 
               names=['empid','lname','jobid','mgrid','hiredate','salary', 'commpct', 'deptid'])
nocomm = len(emp[emp.commpct.isnull()])
print('커미션을 받는 사원: {}명\n커미션을 받지 않는 사원: {}명'.format(len(emp)-nocomm, nocomm))
[문제166] emp_new.csv, dept_new.csv 파일 데이터를 이용해서 조인된 결과를 보려고 합니다. 조인 함수를 생성하세요.

join(emp,'deptno','ename', dept,'deptno','dname')
join(emp,'mgr','ename', emp,'empno','ename')
# join(테이블1, 키컬럼, 출력컬럼, 테이블2, 키컬럼, 출력컬럼)
import pandas as pd
emp = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new_1.csv', 
                  names=['empno', 'ename','jobid','mgr','hiredate','salary','commpct','deptno'])
dept = pd.read_csv('C:/Users/stu/git/DA_Academy/dept_new.csv', 
                  names=['deptno','dname','mgrid','loc'])

def join(table_1, key_1, column_1, table_2, key_2, column_2):
    print(pd.merge(table_1[[key_1, column_1]], table_2[[key_2, column_2]], left_on=key_1, right_on=key_2).iloc[:,[1,-1]])
# 선생님 답
import  csv
empfile = open("c:\data\emp_new.csv",'r')
deptfile = open("c:\data\dept_new.csv",'r')
emp_csv = csv.reader(empfile)
dept_csv = csv.reader(deptfile)

emp = []  
dept =[]

for i in  dept_csv:
    dept.append({'deptno':i[0],'dname':i[1],'mgr':i[2],'loc':i[3]})

for j in emp_csv:
    emp.append({'empno':j[0],'ename':j[1],'job':j[2],'mgr':j[3], 'hiredate':j[4],'sal':j[5],'comm':j[6],'deptno':j[7]})

def join(outer_table,outer_column1,outer_column2,inner_table,inner_column1,inner_column2):
   for  o  in  outer_table:
      for  i  in  inner_table:
         if o[outer_column1] == i[inner_column1]:
             print (o[outer_column2], i[inner_column2]) 


join(emp,'deptno','ename', dept,'deptno','dname')

join(emp,'mgr','ename', emp,'empno','ename')



import  pandas  as  pd

emp = pd.read_csv("c:\data\emp_new.csv", names = ['empid','ename','job','mgr','hire_date','sal','comm','deptno'])
dept = pd.read_csv("c:\data\dept_new.csv",names = ['deptno','dname','mgr','loc'])

def join(outer_table,outer_column1,outer_column2,inner_table,inner_column1,inner_column2):
    print(pd.merge(outer_table[[outer_column1,outer_column2]],inner_table[[inner_column1,inner_column2]],left_on=outer_column1,right_on=inner_column1))

join(emp,'deptno','ename', dept,'deptno','dname')

join(emp,'mgr','ename', emp,'empid','ename')    
[문제167] x변수에는 1,2,3,4,5 y변수에는 6,7,8,9,10 들어 있다. f(x,y) = x2 + y 를 구하세요.(lambda, map 함수를 이용하세요)

x = [1,2,3,4,5]
y = [6,7,8,9,10]

def f(x,y):
    return list(map(lambda x,y:2*x+y, x,y))
[문제168] emp_new.csv는 pandas로 읽고 dept_new.csv는 일반 csv로 읽어들인 후 조인을 수행하세요.

import pandas as pd
from pandas import Series, DataFrame
emp = pd.read_csv('C:/Users/stu/git/DA_Academy/emp_new_1.csv', 
                  names=['empno', 'ename','jobid','mgr','hiredate','salary','commpct','deptno'])

dept = {}
with open('C:/Users/stu/git/DA_Academy/dept_new.csv', 'r') as file:
    for line in file:
        data = line.strip().split(',')
        dept[float(data[0])] = data[1]

emp['dname'] = emp.deptno.map(dept)
[문제169] happiness 변수에 문장이 있습니다. 행복이란 단어가 몇개 나오는지 분석하시고, 위치정보도 출력해주세요.

happiness = '우리나라 「헌법」 제10조는 “모든 국민은 인간으로서의 존엄과 가치를 가지며, 행복을 추구할 권리를 가진다”라고 규정하고 있다.행복추구권은 근대 입헌민주주의의 핵심인 개인주의·자유주의를 그 사상적 기반으로 하고 있다. 행복추구권에 있어서 행복은 다의적인 개념으로, 각자의 생활조건이나 가치관에 따라 다르게 이해될 수 있으나, 최소한 인간적인 고통이 없는 상태 내지 만족감을 느낄 수 있는 행복한 상태를 의미한다.'
happiness = '우리나라 「헌법」 제10조는 “모든 국민은 인간으로서의 존엄과 가치를 가지며, 행복을 추구할 권리를 가진다”라고 규정하고 있다.행복추구권은 근대 입헌민주주의의 핵심인 개인주의·자유주의를 그 사상적 기반으로 하고 있다. 행복추구권에 있어서 행복은 다의적인 개념으로, 각자의 생활조건이나 가치관에 따라 다르게 이해될 수 있으나, 최소한 인간적인 고통이 없는 상태 내지 만족감을 느낄 수 있는 행복한 상태를 의미한다.'
result = []
start = 0
try:
    while True:
        i = happiness.index('행복', start)
        result.append(i)
        start = i+1

except ValueError:
    num = len(result)
    print('"행복"은 총 {}회 발견되었습니다.'.format(num))
    if num:
        print('위치:', result)

except Exception as error:
    print('에러가 발생했습니다! ',error)
[문제170] emp1.csv, emp2.csv파일을 읽어서 부서별 총액급여를 구하세요.

import pandas as pd
from pandas import Series, DataFrame
emp = pd.DataFrame()
for i in range(1, 3):
    temp = pd.read_csv('C:/Users/stu/git/DA_Academy/emp{}.csv'.format(i), 
                      names=['empid', 'lname','hiredate','salary','deptid'])
    emp = emp.append(temp)
print(emp.salary.groupby(emp.deptid).sum())    
[문제171] 2016년도에 태어난 아이들의 정보가 들어 있는 year2016파일을 분석해야 합니다. 총 출생수를 출력해주세요.

total = 0
with open('C:/Users/stu/git/DA_Academy/yob2016.txt', 'r') as file:
    for line in file:
        data = line.split(',')
        total += int(data[2])
print('2016년 총 출생수:', total)        
# pandas
import pandas as pd
yob = pd.read_csv('C:/Users/stu/git/DA_Academy/yob2016.txt', names=['name','gender','num'])
print('2016년 총 출생수:', yob.num.sum())        
# 선생님 답
import csv
import os

count=0
file = 'c:\data\yob2016.txt'
name = os.path.basename('c:\data\yob2016.txt') # os.path.basename: 경로를 제거하고 파일명만 리턴하는 함수
name = name.split('.')[0]
with open(file,'r') as f:
    data=csv.reader(f)
    for d in data:
        count += int(d[2])
print(name,count)

import csv
import os

count=0
file = 'c:\data\yob2016.txt'
name = os.path.basename('c:\data\yob2016.txt')
name = name.split('.')[0]
with open(file,'r') as f:
    data=f.readlines()
    for d in data:
        birth = d.split(',')[2]
        count += int(birth)
print(name,count)



import pandas as pd 
import os

file = 'c:/data/yob2016.txt'
name = os.path.basename(file)
name = name.split('.')[0]

yob = pd.read_csv('c:\data\yob2016.txt', names=['name','gender','birth'])


print(name,yob['birth'].sum())
[문제172] 2016년도에 태어난 아이 이름 상위 10까지 보여주세요. 성별 상위 5까지 보여주세요.

import pandas as pd
yob = pd.read_csv('C:/Users/stu/git/DA_Academy/yob2016.txt', names=['name','gender','num'])
# 상위 10위
## sort 사용
yob.sort_values(ascending=False, by='num')[0:10]
## rank 사용
yob[yob.num.rank(ascending=False, method='dense', na_option='bottom')<=10].sort_values(ascending=False, by='num')

# 성별 상위 5위
## sort 사용
female = yob[yob.gender == 'F'].sort_values(ascending=False, by='num')[0:5]
male = yob[yob.gender == 'M'].sort_values(ascending=False, by='num')[0:5]
pd.concat([female, male])
## rank 사용
yob[yob.groupby('gender').num.rank(ascending=False, method='dense', na_option='bottom')<=5].sort_values(ascending=False, by='gender')
# 선생님답
import pandas as pd 

yob2016 = pd.read_csv('c:\data\yob2016.txt', names=['name','gender','birth'])

def top(df, n=5, column='birth'):
    return df.sort_values(by=column, ascending=False)[:n]

print(top(yob2016 , n=10))

print(yob2016.groupby('gender').apply(top))

[문제173] emp1.csv 데이터를 이용해서 급여를 많이 받는 순으로 10위까지 구하세요.

import pandas as pd
emp = pd.read_csv('C:/Users/Rainy/Documents/git/DA_Academy\emp1.csv', 
                  names=['empid', 'lname','hiredate','salary','deptid'])
# sort_values
emp.sort_values('salary', ascending=False)[:10]

# rank
emp[emp.salary.rank(ascending=False, method='first') <= 10].sort_values(ascending=False, by='salary')
[문제174] emp1.csv 데이터를 이용해서 부서별로 급여를 많이 받는 순으로 5위까지 구하세요.

import pandas as pd
emp = pd.read_csv('C:/Users/Rainy/Documents/git/DA_Academy\emp1.csv', 
                  names=['empid', 'lname','hiredate','salary','deptid'])
emp[emp.salary.groupby(emp.deptid).rank(ascending=False) <= 5].sort_values(ascending=[True, False], by=['deptid','salary'])
[문제175] yob2016.txt 데이터를 이용해서 아기 이름 순위 10위까지 구하세요.

import pandas as pd
yob = pd.read_csv('C:/Users/Rainy/Documents/git/DA_Academy\yob2016.txt', 
                  names=['name','gender','num'])
# sort_values
yob.sort_values(by='num', ascending=False)[:10]

# rank
yob[yob.num.rank(ascending=False, method='first') <= 10].sort_values(by='num', ascending=False)
[문제176] yob2016.txt 데이터를 이용해서 성별 아기 이름 순위 5위까지 구하세요.

import pandas as pd
yob = pd.read_csv('C:/Users/Rainy/Documents/git/DA_Academy\yob2016.txt', 
                  names=['name','gender','num'])

yob[yob.num.groupby(yob.gender).rank(ascending=False, method='first') <= 5].sort_values(by=['gender', 'num'], ascending=False)
[문제177] 2000 ~ 2016년도 년도별 출생수

https://catalog.data.gov/dataset/baby-names-from-social-security-card-applications-national-level-data
2000 3777666
2001 3741011
2002 3735651
2003 3799547
2004 3817903
2005 3841440
2006 3952231
2007 3993206
2008 3925486
2009 3814539
2010 3689517
2011 3650434
2012 3648441
2013 3634744
2014 3692930
2015 3683749
2016 3637321 
# pandas 
import pandas as pd

for i in range(17):
    year = 2000+i
    file = 'C:/Users/stu/git/DA_Academy/yob{}.txt'.format(year)
    yob = pd.read_csv(file, names=['name', 'gender','num'])
    print(year, yob.num.sum())

# pandas 없이
for i in range(17):
    year = 2000+i
    file = 'C:/Users/stu/git/DA_Academy/yob{}.txt'.format(year)
    total = 0
    with open(file, 'r') as yob:
        for line in yob:
            data = line.split(',')
            total += int(data[2])
        print(year, total)
[문제178] 2000 ~ 2016년도 년도별 출생수 결과를 year.txt 파일에 저장하세요.

import pandas as pd

for i in range(17):
    year = 2000+i
    file = 'C:/Users/stu/git/DA_Academy/yob{}.txt'.format(year)
    yob = pd.read_csv(file, names=['name', 'gender','num'])
    with open('C:/Users/stu/git/DA_Academy/year.txt', 'a+') as file:
        file.write(str(year)+','+str(yob.num.sum())+'\n')
[문제179] 2010 ~ 2016 년도까지 성별 출생 현황을 year_gender_total.csv 파일로 생성해주세요.

import pandas as pd

for i in range(17):
    year = 2000+i
    file = 'C:/Users/stu/git/DA_Academy/yob{}.txt'.format(year)
    yob = pd.read_csv(file, names=['name', 'gender','num'])
    with open('C:/Users/stu/git/DA_Academy/year_gender_total.csv', 'a+') as file:
        file.write('{},F,{}\n'.format(year, yob[yob.gender=='F'].num.sum()))
        file.write('{},M,{}\n'.format(year, yob[yob.gender=='M'].num.sum()))

[문제180] 2010 ~ 2016 년도까지 성별 출생 현황을 그래프를 그리세요.

import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt

file = pd.read_csv('C:/Users/stu/git/DA_Academy/year_gender_total.csv', names=['year','gender', 'num'])
file = file.set_index('year')
plt.plot(file[file.gender=='F'].num, label='여성')
plt.plot(file[file.gender=='M'].num, label='남성')
plt.grid()
plt.title('연도별 남녀 출생',fontsize=15)

plt.xlabel('년도',fontsize=10)
plt.ylabel('출생수',fontsize=10)
plt.legend()

[문제181] 이 주소로 접속하셔서 게시글을 출력하세요.
http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?hmpMnuId=106

import urllib.request as req
from bs4 import BeautifulSoup as bs

url = 'http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?hmpMnuId=106'
html = req.urlopen(url)
soup = bs(html, 'html.parser')
articles = soup.findAll('p', class_='con')

for i, article in enumerate(articles):
    print('{}번째 댓글: {}'.format(i+1, article.string.strip()))
# 선생님답
from bs4 import BeautifulSoup
import urllib.request as req

url = "http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?hmpMnuId=106"
res = req.urlopen(url)
soup = BeautifulSoup(res,"html.parser")
result = soup.find_all('p', class_="con")
for i in result:
    print(i.get_text(strip=True))



url = "http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?hmpMnuId=106"
res = req.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup(res,"html.parser")
result = soup.find_all('p', class_="con")
for i in result:
    print(i.get_text(strip=True))
[문제182] 게시글 뿐만 아니라 게시날짜 정보도 같이 출력하시오 !

2017.04.12 19:48 레이디버그 3기나오면 좋은사람 손~~
import urllib.request as req
from bs4 import BeautifulSoup as bs

url = 'http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?hmpMnuId=106'
html = req.urlopen(url)
soup = bs(html, 'html.parser')
articles = soup.findAll('li', class_='spot_')

for article in articles:
    date = article.find('span', class_='date').string
    reply = article.find('p', class_='con').string.strip()
    print(date, reply)
# 선생님 답
from bs4 import BeautifulSoup
import urllib.request as req
url = "http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?hmpMnuId=106"
res = req.urlopen(url)
soup= BeautifulSoup(res, "html.parser")
a = soup.find_all('p',class_="con")
b = soup.find_all('span',class_="date")
print(b[0].get_text())
print(b[0].text)

cnt= 0
for i in a:
    print(b[cnt].text,i.get_text(strip=True))
    cnt += 1

print(cnt)
[문제183] 게시판에 게시글 전부를 수집해주세요.

import urllib.request as req
from bs4 import BeautifulSoup as bs
result = []
for i in range(1, 17):
    url = 'http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?c.page={}&hmpMnuId=106&searchKeywordValue=0&bbsId=10059819&searchKeyword=&searchCondition=&searchConditionValue=0&'.format(i)
    html = req.urlopen(url)
    soup = bs(html, 'html.parser')
    articles = soup.findAll('li', class_='spot_')
    for article in articles:
        date = article.find('span', class_='date').string
        reply = article.find('p', class_='con').string.strip()
        result.append([str(date), str(reply)])
# 선생님 답
for i in range(1,16):
    url = "http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?c.page=" +str(i)+ "&hmpMnuId=106&searchKeywordValue=0&bbsId=10059819&searchKeyword=&searchCondition=&searchConditionValue=0&"

    res = req.urlopen(url)
    soup= BeautifulSoup(res, "html.parser")
    a = soup.find_all('p',class_="con")
    b = soup.find_all('span',class_="date")
    cnt= 0
    content =[]
    for i in a:
        content.append(b[cnt].text + i.get_text(strip=True))
        cnt += 1

    for j in content:
        print(j)
[문제184] 동아일보에서 인공지능에 기사 스크롤링 해주세요.

import urllib.request as req
from bs4 import BeautifulSoup as bs

result = []
for i in range(1, 3):
    main_url = 'http://news.donga.com/search?p={}&query=%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5&check_news=1&more=1&sorting=1&search_date=1&v1=&v2=&range=1'.format(i)
    main_html = req.urlopen(main_url)
    main_soup = bs(main_html, 'html.parser')
    links = main_soup.findAll('p', class_='tit')
    for link in links:
        article_html = req.urlopen(link.a.attrs['href'])
        article_soup = bs(article_html, 'html.parser')
        article = article_soup.find('div', class_='article_txt').text
        result.append(article.split('@donga.com')[0])
#선생님답
import urllib.request
from bs4 import BeautifulSoup

params = []

for i in range(1,20,15):
    list_url = "http://news.donga.com/search?p="+str(i)+"&query=%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5&check_news=1&more=1&sorting=1&search_date=1&v1=&v2=&range=1"

    url = urllib.request.Request(list_url)
    res = urllib.request.urlopen(url, timeout=100).read().decode("utf-8")
    soup= BeautifulSoup(res, "html.parser")
    for link in soup.findAll('p', {'class':'tit'}):
        params.append(link.find('a').get('href'))

print(params)


cn = 0
txt= []
for i in params:
    print(i)
    url = urllib.request.Request(i)
    res = urllib.request.urlopen(url).read().decode("utf-8")
    soup= BeautifulSoup(res, "html.parser")
    result = soup.find_all('div',class_='article_txt')


    for i in result:
        #print(i.text)
       txt.append(i.text)

txt[0]

txt[0][0:txt[0].find('Copyright')]

for i in range(0,30):
    print(txt[i][0:txt[i].find('Copyright')])

[문제185] 동아일보에서 인공지능에 기사 스크롤링 하셔서 단어의 빈도수를 체크하시고 워드클라우드를 그리세요.

import requests as req
from bs4 import BeautifulSoup as bs
from konlpy.tag import *
import matplotlib.pyplot as plt
import nltk
from wordcloud import WordCloud as wc

user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) " +\
"AppleWebKit/537.36 (KHTML, like Gecko) " + \
"Chrome/37.0.2062.94 Safari/537.36"
headers = {"User-Agent": user_agent}
articles = []
for page in range(1, 32, 15):
    main_url = '''
        http://news.donga.com/search?p={}&query=%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0&
        check_news=1&more=1&sorting=1&search_date=1&v1=&v2=&range=1
        '''.format(page)
    main_html = req.get(main_url, headers=headers).text
    main_soup = bs(main_html, 'html.parser')
    links = main_soup.select('div.searchCont > div > div.p > a')

    for link in links:
        url = link.attrs['href']
        html = req.get(url, headers=headers).text
        soup = bs(html, 'html.parser')
        try:
            article = soup.select_one('#contents > div.article_view > div.article_txt').text
        except:
            pass
        else:
            articles.append(article)    

kkm = Kkma()
fulltxt = '\n'.join(articles)
tokens_ko = kkm.nouns(fulltxt)            
ko = nltk.Text(tokens_ko)
ko = [word for word in ko if len(word)>1]
ko = nltk.Text(ko)
data = ko.vocab().most_common(50)
wordcloud = wc(font_path='c:/Windows/Fonts/malgunbd.ttf', background_color='white',
              width=1000, height=800).generate_from_frequencies(dict(data))
plt.figure(figsize=(10,10))
plt.imshow(wordcloud)
plt.axis('off')

[문제186] http://www.skwyverns.com/Wyverns/Players/picther/picther_list.asp 이미지를 다운로드하세요.

import urllib.request as req
from bs4 import BeautifulSoup as bs

url = 'http://www.skwyverns.com/Wyverns/Players/picther/picther_list.asp'
html = req.urlopen(url)
soup = bs(html, 'html.parser')

imgs = soup.select('#content > div > div.entrie_list > div > div > div.sum > a > img')

for img in imgs:
    req.urlretrieve(('http://www.skwyverns.com'+img.get('src')), 'c:/data/{}.jpg'.format(img.get('alt')))

[문제 187] 생성자에 이름, 핸드폰번호, 메일, 주소 변수를 생성합니다. print_info 메소드를 생성한 후 출력하는 Contact 클래스를 생성하세요. 인스턴스는 set_contact 함수를 이용해서 만드시고 이름, 핸드폰번호,메일, 주소는 입력값으로 받아서 출력하세요.

이름을 입력하세요 : 홍길동
핸드폰번호를 입력하세요 : 010-1000-1004
메일을 입력하세요 : hong@aaa.com
주소를 입력하세요 : 서울시 강남구 삼성로

이름 : 홍길동
핸드폰번호 : 010-1000-1004
메일 : hong@aaa.com
주소 : 서울시 강남구 삼성로
class Contact(object):
    def __init__(self):
        self.name = ''
        self.mobile = ''
        self.email = ''
        self.address = ''

    def set_contact(self):
        self.name = input('이름을 입력하세요 :')
        self.mobile = input('핸드폰번호를 입력하세요 :')
        self.email = input('메일을 입력하세요 :')
        self.address = input('주소를 입력하세요 :')

    def print_info(self):
        print('이름 :', self.name)
        print('핸드폰번호 :', self.mobile)
        print('메일 :', self.email)
        print('주소 :', self.address)

hong = Contact()
hong.set_contact()
hong.print_info()
# 선생님 답
class Contact:
    def __init__(self,name, pn, email, addr):
        self.name = name
        self.pn = pn
        self.email = email
        self.addr = addr

    def print_info(self):
        print("이름 : {} ".format(self.name))
        print("핸드폰번호 : {} ".format(self.pn))
        print("메일 : {} ".format(self.email))
        print("주소 : {} ".format(self.addr))


def set_contact():
    name = input("이름을 입력하세요 : ")
    pn = input("핸드폰번호를 입력하세요 : ")
    email = input("메일을 입력하세요 : ")
    addr = input("주소를 입력하세요 : ")
    conIns = Contact(name, pn, email, addr)
    conIns.print_info()

set_contact()
[문제188] Contact 클래스 이용해서 입력 들어 온 값들을 c:/data/contact.db 에 저장해서 관리하세요.

import sqlite3
# conn = sqlite3.connect('C:/Users/Rainy/Documents/git/DA_Academy/contact.db')
# c = conn.cursor()
# c.execute('create table contact(name text, phone text, email text, address text)')
# conn.commit()
# c.close()
# conn.close()

class Contact(object):
    def __init__(self, name, mobile, email, address):
        self.name = name
        self.mobile = mobile
        self.email = email
        self.address = address

    def print_info(self):
        print('이름 :', self.name)
        print('핸드폰번호 :', self.mobile)
        print('메일 :', self.email)
        print('주소 :', self.address)

    def insert_db(self):
        self.conn = sqlite3.connect('C:/Users/Rainy/Documents/git/DA_Academy/contact.db')
        self.c = self.conn.cursor()
        self.c.execute('insert into contact(name, phone, email, address) values(?, ?, ?, ?)', 
                       (self.name, self.mobile, self.email, self.address))

    def commit_db(self):
        self.conn.commit()

    def rollback_db(self):
        self.conn.rollback()

    def close_db(self):
        self.c.close()
        self.conn.close()

def set_contact():
    name = input("이름을 입력하세요 : ")
    mobile = input("핸드폰번호를 입력하세요 : ")
    email = input("메일을 입력하세요 : ")
    address = input("주소를 입력하세요 : ")
    contact = Contact(name, mobile, email, address)
    contact.print_info()
    contact.insert_db()
    contact.commit_db()
    contact.close_db()

set_contact()

[문제189]초기 생성자에는 이름, 주소, 급여를 입력값으로 받고 아래와 같이 출력되는 클래스를 생성하세요. 인스턴스 생성될때 마다 건수를 출력해주세요.

사원수 : 1
이름 : 홍길동 , 주소 : 덴마크,  급여 : 1000

사원수 : 2
이름 : 홍아들 , 주소 : 노르웨이,  급여 : 2000
class Employee(object):
    total = 0
    def __init__(self, name, address, salary):
        self.name = name
        self.address = address
        self.salary = salary
        Employee.total += 1 
        if __name__ == '__main__':
            print('사원수 :', Employee.total)
            print('이름 : {}, 주소 : {}, 급여 : {}'.format(self.name, self.address, self.salary))

e1 = Employee('홍길동', '덴마크', 1000)
e2 = Employee('홍아들', '노르웨이', 2000)
[문제190]

id_number1 = '010101-3234567'
id_number2 = '990202-2123456'

2001 01 01 남성
1999 02 02 여성
class IdNumber(object):
    def __init__(self, idnum):
        self.idnum = idnum
        if self.idnum[7]=='1':
            print('19{} {} {} 남성'.format(idnum[0:2], idnum[2:4], idnum[4:6]))
        elif self.idnum[7]=='2':
            print('19{} {} {} 여성'.format(idnum[0:2], idnum[2:4], idnum[4:6]))
        elif self.idnum[7]=='3':
            print('20{} {} {} 남성'.format(idnum[0:2], idnum[2:4], idnum[4:6]))
        elif self.idnum[7]=='4':
            print('20{} {} {} 여성'.format(idnum[0:2], idnum[2:4], idnum[4:6]))

id_number1 = '010101-3234567'
id_number2 = '990202-2123456'

id1 = IdNumber(id_number1)
id2 = IdNumber(id_number2)

[문제191] Person 클래스를 생성하세요. 생성자는 이름, 나이, 성별을 만드세요. Person 클래스 에는 printMe 메소드를 생성하셔서 이름, 나이 성별을 출력합니다.

Employees클래스를 생성한후 Person상속받습니다. 생성자는 이름, 나이, 성별, 주소, 생일입니다. 단 이름, 나이, 성별은 person에서 상속받으세요. Employees 클래스에 printMe를 재구성하셔서 주소, 생일을 출력하세요.

myPerson = Person("홍길동","10", "남")
myPerson.printMe()

myEmployee = Employee("송준기", "2", "남", "서울", "2016년 01월 01일")
myEmployee.printMe()

이름은 홍길동 ,  나이는 10살 이고, 성별은 남 입니다.
이름은 송준기 ,  나이는 2살 이고, 성별은 남 입니다.
집 주소는  서울  생일은  2016년 01월 01일 입니다. 
class Person(object):
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def printMe(self):
        print('이름은 {}, 나이는 {}살 이고, 성별은 {}입니다.'.format(self.name, self.age, self.gender))

class Employee(Person):
    def __init__(self, name, age, gender, address, bday):
        Person.__init__(self, name, age, gender)
        self.address = address
        self.bday = bday

    def printMe(self):
        Person.printMe(self)
        print('집 주소는 {}, 생일은 {} 입니다. '.format(self.address, self.bday))

myPerson = Person("홍길동","10", "남")
myPerson.printMe()
myEmployee = Employee("송준기", "2", "남", "서울", "2016년 01월 01일")
myEmployee.printMe()

[문제192] Add 클래스에 두수를 더하는 값을 리턴하는 add 메소드 생성 Multiply 클래스에 두수를 곱한값을 리턴하는 multiply 메소드 생성 Divide 클래스에 두수를 나눈값을 리턴하는 divide메소드 생성 Calculator클래스에는 Add, Multiply, Divide 상속받고 두수를 뺀값을 리턴하는 sub 메소드 생성하세요.

class Add(object):
     def add(self, a, b):
        return a+b

class Multiply(object):
    def multiply(self, a, b):
        return a*b

class Divide(object):
    def divide(self, a, b):
        return a/b

class Calculator(Add, Multiply, Divide):
    def sub(self, a, b):
        return a-b

[문제193] 양의 정수값만 입력 받아서 나누기를 수행하는 positive_divide 함수를 생성하세요.

print(positive_divide())

분자 숫자를 입력하세요 : 10
분모 숫자를 입력하세요 : 2
5.0

print(positive_divide()) 

분자 숫자를 입력하세요 : 10
분모 숫자를 입력하세요 : -2
오류  - 음수로 나눌수 없습니다. -2


print(positive_divide())
분자 숫자를 입력하세요 : 10
분모 숫자를 입력하세요 : 0
오류 -  0으로 나눌수 없습니다. division by zero
def positive_divide():
    a = int(input('분자 숫자를 입력하세요 : '))
    b = int(input('분모 숫자를 입력하세요 : '))
    if b < 0:
        return '오류 - 음수로 나눌 수 없습니다. {}'.format(b)

    elif b == 0:
        return '오류 - 0으로로 나눌 수 없습니다. division by zero'

    else:
        return a/b 
def positive_divide():
    a = int(input('분자 숫자를 입력하세요 : '))
    b = int(input('분모 숫자를 입력하세요 : '))

    try:
        result = a/b
    except ZeroDivisionError as e:
        return '오류 - 0으로로 나눌 수 없습니다. '+str(e)
    except Exception as error:
        return error
    else:
        if b < 0:
            return '오류 - 음수로 나눌 수 없습니다. {}'.format(b)
        else:
            return result
class MinusError(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg

def positive_divide():
    a = int(input('분자 숫자를 입력하세요 : '))
    b = int(input('분모 숫자를 입력하세요 : '))

    try:
        result = a/b
    except ZeroDivisionError as e:
        return '오류 - 0으로로 나눌 수 없습니다. '+str(e)
    except Exception as error:
        return error
    else:
        if b < 0:
            raise MinusError('오류 - 음수로 나눌 수 없습니다. {}'.format(b))
        else:
            return result
[문제194] 한주간동안 걸음수를 요일별로 그래프를 그리세요. 단 막대그래프 함수를 생성해서 인수값으로 걸음수, 요일을 입력하면 그래프가 그려지도록하세요.

import matplotlib.pyplot as plt
from matplotlib import font_manager, rc
font_name = font_manager.FontProperties(fname="c:/Windows/Fonts/malgun.ttf").get_name()
rc('font', family=font_name)

def create_bar_chart(data, labels,bar):

    num_bars = len(data)

    positions = range(1, num_bars+1)
    if bar == 1:        
        plt.bar(positions, data, align='center')
        plt.xticks(positions, labels)
        plt.xlabel('요일')
        plt.ylabel('걸음수')

    else:
         plt.barh(positions, data, align='center')
         plt.yticks(positions, labels)
         plt.xlabel('걸음수')
         plt.ylabel('요일')


    plt.title('한주간 동안 걸음수') 
    plt.grid()
    plt.show()

if __name__=='__main__':
    step = [1090,2000,3000,4000,10000,50000,2000]
    labels = ['월','화','수','목','금','토','일']
    create_bar_chart(step,labels,2)
[문제195]

class Walk(object):
    import matplotlib.pyplot as plt
    from matplotlib import font_manager, rc
    font_name = font_manager.FontProperties(fname="c:/Windows/Fonts/malgun.ttf").get_name()
    rc('font', family=font_name)

    def __init__(self):
        if __name__=='__main__':
            step = [1090,2000,3000,4000,10000,50000,2000]
            labels = ['월','화','수','목','금','토','일']
            self.create_bar_chart(step,labels,1)

    def create_bar_chart(self, data, labels, bar):
        num_bars = len(data)

        positions = range(1, num_bars+1)
        if bar == 1:        
            self.plt.bar(positions, data, align='center')
            self.plt.xticks(positions, labels)
            self.plt.xlabel('요일')
            self.plt.ylabel('걸음수')

        else:
            self.plt.barh(positions, data, align='center')
            self.plt.yticks(positions, labels)
            self.plt.xlabel('걸음수')
            self.plt.ylabel('요일')


        self.plt.title('한주간 동안 걸음수') 
        self.plt.grid()
        self.plt.show()

[문제196] knn 프로그램을 작성하세요.

pointlist[(1,1),(1,0),(2,0),(0,1),(2,2),(1,5),(2,3)]

<수행>
knn([2,1],2,pointlist)

<결과>
[(1, 1), (2, 0)]
def knn(test, k, train):
    import math
    dist_list = []
    for i in range(len(train)):
        dist = 0
        item = train[i]
        for j in range(len(item)):
            dist += (test[j]-item[j])**2
        dist = math.sqrt(dist)
        dist_list.append([dist, i])
    sorted_dist = sorted(dist_list)
    result = []
    for i in range(k):
        idx = sorted_dist[i][1]
        result.append(train[idx])
    return result   
[문제197] 키, 몸무게에 따른 성별을 분류해주세요.

키, 몸무게 데이터
[[158, 64],
[170, 86],
[183, 84],
[191, 80],
[155, 49],
[163, 59],
[180, 67],
[158, 54],
[170, 67]]

성별 레벨
['male', 'male', 'male', 'male', 'female', 'female', 'female', 'female', 'female']

[155, 70] 성별을 분류하세요.
'female'
train = [[158, 64],[170, 86],[183, 84],[191, 80],[155, 49],[163, 59],[180, 67],[158, 54],[170, 67]]
label = ['male', 'male', 'male', 'male', 'female', 'female', 'female', 'female', 'female']
y = np.array([[155,70]])
distances = np.sqrt(np.sum(pow(train-y,2), axis=1))
indices = distances.argsort()[:3]
nn = np.take(label, indices)
c = Counter(nn)
c.most_common(1)[0][0]

[문제198] 상품구매여부를 knn으로 분류해주세요.

from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import scale
import pandas  as  pd
import numpy as np

df = pd.read_csv("c:/data/buy.csv")

x_train = np.array([scale(df['나이']),scale(df['월수입'])]).T
label = list(df['상품구매여부'])
age_mean = np.mean(df['나이'])
age_std = np.std(df['나이'])

pay_mean = np.mean(df['월수입'])
pay_std = np.std(df['월수입'])

K = 3
clf = KNeighborsClassifier(n_neighbors=K)
clf.fit(x_train,label)
prediction_label = clf.predict(np.array([[(40-age_mean)/age_std, (500-pay_mean)/pay_std]]))[0]
prediction_label

[문제199] 보험데이터를 이용해서 보험료에 가장 영향을 주는 독립변수가 무엇인지 확인하세요.

import pandas as pd
import statsmodels.api as sm
from sklearn.preprocessing import minmax_scale

data = pd.read_csv('data/insurance.csv')
data.head() # 데이터 확인
data.isnull().sum() # null값 존재 확인

lr = LogisticRegression()
cols = ['sex', 'smoker', 'region']
train_data = data.loc[:, ['age', 'bmi', 'children']].copy()
train_label = minmax_scale(data.iloc[:,-1].copy()) # 라벨값을 0-1로 스케일링
for i in cols:
    temp = pd.get_dummies(data.loc[:,i], prefix=i)
    train_data = train_data.join(temp)

logit = sm.Logit(train_label, train_data)
result = logit.fit()
result.summary2() #smoke_no / 비흡연 여부가 가장 큰 영향을 줌
Optimization terminated successfully.
         Current function value: 0.291203
         Iterations 6
Model:    Logit    Pseudo R-squared:    -0.233
Dependent Variable:    y    AIC:    797.2596
Date:    2018-10-31 10:04    BIC:    844.0500
No. Observations:    1338    Log-Likelihood:    -389.63
Df Model:    8    LL-Null:    -316.07
Df Residuals:    1329    LLR p-value:    1.0000
Converged:    1.0000    Scale:    1.0000
No. Iterations:    6.0000        
Coef.    Std.Err.    z    P>|z|    [0.025    0.975]
age    0.0328    0.0057    5.7351    0.0000    0.0216    0.0440
bmi    0.0426    0.0131    3.2476    0.0012    0.0169    0.0683
children    0.0683    0.0632    1.0814    0.2795    -0.0555    0.1922
sex_female    -1.4781    69213589.8710    -0.0000    1.0000    -135656144.8659    135656141.9097
sex_male    -1.5119    69213589.8710    -0.0000    1.0000    -135656144.8998    135656141.8759
smoker_no    -2.5688    24098438.0315    -0.0000    1.0000    -47232073.1942    47232068.0566
smoker_yes    -0.4212    24098438.0315    -0.0000    1.0000    -47232071.0466    47232070.2042
region_northeast    -0.6673    93768132.3561    -0.0000    1.0000    -183782162.9828    183782161.6482
region_northwest    -0.7228    93768132.3561    -0.0000    1.0000    -183782163.0383    183782161.5928
region_southeast    -0.8151    93768132.3561    -0.0000    1.0000    -183782163.1306    183782161.5005
region_southwest    -0.7849    93768132.3561    -0.0000    1.0000    -183782163.1004    183782161.5307

[문제 200] tensorflow 상수를 이용해서 아래와 같이 결과를 출력하는 프로그램을 만드세요.
```
a + b = 6
a * b = 8
```
```python
import tensorflow as tf
with tf.Session() as sess:
    a = tf.constant(4)
    b = tf.constant(2)
    print('a + b =',sess.run(a+b))
    print('a * b =',sess.run(a*b))
```

[문제 201] tensorflow 상수를 이용해서 아래와 같이 결과를 출력하는 프로그램을 만드세요. 
단 두 변수의 입력값을 실행시에 넣도록 하는 변수를 이용하세요.
```
Add : 6
Multiply : 8
```
```python
import tensorflow as tf
with tf.Session() as sess:
    a = tf.placeholder('int32')
    b = tf.placeholder('int32')
    add = tf.add(a,b)
    mul = tf.multiply(a,b)
    print('Add :',sess.run(add, feed_dict={a:4, b:2}))
    print('Multiply :',sess.run(mul, feed_dict={a:4, b:2}))
```    

[문제202]
x 변수는 1행 3열 모양의 1,2,3
w 변수는 3행 1열 모양의 2,2,2
y 변수는 x와 w를 행렬곱을 이용한 결과를 수행하는 프로그램을 작성하세요.
```python
import tensorflow as tf
import numpy as np
x = tf.placeholder(tf.float32, shape=(1,3))
w = tf.placeholder(tf.float32, shape=(3,1))
y = tf.matmul(x,y)
with tf.Session() as sess:
    print(sess.run(y, feed_dict={x:[[1,2,3]], 
                           w:[[2],[2],[2]]}))

문제 linear regression 학습을 통해서 입력값에 대한 예측값을 출력하세요
x1 x2 x3 y
73 80 75 152
93 88 93 185
89 91 90 180
96 98 100 196
73 66 70 142

x1_data = [73, 93, 89, 96, 73]
x2_data = [80, 88, 91, 98, 66]
x3_data = [75, 93, 90, 100, 70]
y_data = [152, 185, 180, 196, 142]

x1 = tf.placeholder(tf.float32)
x2 = tf.placeholder(tf.float32)
x3 = tf.placeholder(tf.float32)
y = tf.placeholder(tf.float32)
w1 = tf.Variable(tf.random_normal([1], seed=0), name='weight1')
w2 = tf.Variable(tf.random_normal([1], seed=0), name='weight2')
w3 = tf.Variable(tf.random_normal([1], seed=0), name='weight3')
b = tf.Variable(tf.random_normal([1], seed=0), name='bias')

hp = w1*x1 + w2*x2 + w3*x3 + b
cost = tf.sqrt(tf.reduce_mean(tf.square(hp - y)))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.000057)

train = optimizer.minimize(cost)
sess = tf.Session()
sess.run(tf.global_variables_initializer())

for step in range(2001): # 학습
    cost_v, w1_v, w2_v, w3_v, b_v, _ = sess.run([cost, w1, w2, w3, b, train], 
                                                feed_dict={x1:x1_data, x2:x2_data, x3:x3_data, y:y_data})
    if step%20==0: print(step, cost_v, w1_v, w2_v, w3_v, b_v)

print('당신의 점수는', sess.run(hp, feed_dict={x1:100, x2:70, x3:60}))     

[문제] xor를 logistic regression classifier를 이용해서 프로그램을 생성하세요.

000
011
101
110

import tensorflow as tf
import numpy as np

x_data = np.array([[0,0], [0,1], [1,0], [1,1]], dtype=np.float32)
y_data = np.array([[0], [1], [1], [0]],dtype=np.float32)

x = tf.placeholder(tf.float32, shape=[None, 2])
y = tf.placeholder(tf.float32, shape=[None, 1])

# input
w_1 = tf.Variable(tf.random_normal([2, 2]), name='weight1')
b_1 = tf.Variable(tf.random_normal([1]), name='bias1')
hp_1 = tf.sigmoid(tf.matmul(x, w_1)+b_1)

# hidden layer
w_2 = tf.Variable(tf.random_normal([2, 1]), name='weight2')
b_2 = tf.Variable(tf.random_normal([1]), name='bias2')
hp_2 = tf.sigmoid(tf.matmul(hp_1,w_2)+b_2)

cost = -tf.reduce_mean(y*tf.log(hp_2)+(1-y)*tf.log(1-hp_2)) # cross entropy cost function

train = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)
predict = tf.cast(hp_2 > 0.5, dtype=tf.float32)
accuracy = tf.reduce_mean(tf.cast(tf.equal(predict, y), dtype=tf.float32))

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for step in range(20001):
        cost_val,_ = sess.run([cost, train], feed_dict={x:x_data, y:y_data})
        if step%1000 == 0:
            print(step, cost_val)
    h,c,a = sess.run([hp_2, predict, accuracy], feed_dict={x:x_data, y:y_data})
    print("hypothesis:", h)
    print("predict:", h)
    print("acuraccy:", a)

[문제] zoo data set을 이용해서 분류프로그램을 만드세요.
import tensorflow as tf
import pandas as pd
import numpy as np
raw = np.loadtxt('data/zoo_data.txt', delimiter=',', usecols=range(1,18))
x_data = raw[:, :-1]
y_data = raw[:, [-1]]
y_data = y_data-1

x = tf.placeholder(tf.float32, [None, 16])
y = tf.placeholder(tf.int32, [None, 1])

y_one_hot = tf.one_hot(y, 7)
y_one_hot = tf.reshape(y_one_hot, [-1, 7])

w = tf.Variable(tf.random_normal([16, 7], seed=0), name='weight')
b = tf.Variable(tf.random_normal([7], seed=0), name='bias')

logits = tf.matmul(x, w) + b
hp = tf.nn.softmax(logits)

cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_one_hot))
train = tf.train.GradientDescentOptimizer(learning_rate=0.05).minimize(cost)
prediction = tf.argmax(hp, 1)
correct_prediction = tf.equal(prediction, tf.argmax(y_one_hot, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

sess = tf.Session()
sess.run(tf.global_variables_initializer())
for step in range(2001):
    sess.run(train, feed_dict={x:x_data, y:y_data})
    if step%200==0:
        loss, acc = sess.run([cost, accuracy], feed_dict={x:x_data, y:y_data})
        print('Step:', step)
        print('Loss:', loss)
        print('Acc:', acc)

[문제] bmi.csv 내용을 신경망을 이용해서 분류해 보세요.

#BMI

BMI = 몸무게 / (키(m)*키(m))
18.5 이상 25미만이면 표준
#label : thin(저체중), normal(정상), fat(비만)

import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler

data = pd.read_csv('data/bmi.csv')
data['label'] = data.label.apply(lambda x: 0 if x=='thin' else (1 if x == 'normal' else 2))
x_data = data.iloc[:,:2]
y_data = data.iloc[:, [2]]

x = tf.placeholder(tf.float32, [None, 2])
y = tf.placeholder(tf.int32, [None, 1])

y_one_hot = tf.one_hot(y, 3)
y_one_hot = tf.reshape(y_one_hot, [-1, 3])

w = tf.Variable(tf.random_normal([2, 3], seed=0), name='weight')
b = tf.Variable(tf.random_normal([3], seed=0), name='bias')

logits = tf.matmul(x, w) + b
hp = tf.nn.softmax(logits)

cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_one_hot))
train = tf.train.GradientDescentOptimizer(learning_rate=0.00005).minimize(cost)
prediction = tf.argmax(hp, 1)
correct_prediction = tf.equal(prediction, tf.argmax(y_one_hot, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

sess = tf.Session()
sess.run(tf.global_variables_initializer())
for step in range(10001):
    sess.run(train, feed_dict={x:x_data, y:y_data})
    if step%1000==0:
        loss, acc = sess.run([cost, accuracy], feed_dict={x:x_data, y:y_data})
        print('Step:', step)
        print('Loss:', loss)
        print('Acc:', acc)
        print('\n')

[문제] 0부터 143까지의 원소로 이루어진 12x12 행렬을 만들고 4x4필터(단위행렬)를 이용해서 합성곱을 수행하세요. 
단, 스트라이드는 1입니다.

x_data=np.arange(144).reshape(12,12)
y_data=np.eye(4,4)

np.cumsum(x_data[0:4,0:4] * y_data)[-1]

f=[]
a=0
b=4   
c=0
d=4

while 1 :
    ab=np.cumsum(x_data[a:b,c:d] * y_data)[-1]
    a=a+1
    b=b+1
    f.append(ab)
    if a>8:
        a=0
        b=4
        c=c+1
        d=d+1
    if c>8:
        break
    
total=np.array(f).reshape(9,-1)
end=total.T    

# 합성곱 계층 : feature map을 만들고 그 feature map을 선명하게 해주는 층
# 합성곱 연산 : 이미지 3차원(세로,가로,색상) 데이터의 형상을 유지하면서 연산하는 작업
# 합성곱 : 입력데이터에 필터를 적용 한것이 합성곱연산이다.

a = np.arange(144).reshape(12,12)
filter = np.eye(4,4)

result = []
for r in range(len(a)-3):
    for c in range(len(a)-3):
      result.append(np.sum(a[r:r+4,c:c+4]*filter))

result=np.array(result).reshape(9,9)
print(result)    
