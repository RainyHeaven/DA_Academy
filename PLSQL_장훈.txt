/*[문제1] 화면의 결과 처럼 프로그램을 작성하세요.
TODAY'S : 2018-07-04
TOMORROW'S : 2018-07-05*/
BEGIN
dbms_output.put_line('TODAY''S : ' || to_char(SYSDATE, 'YYYY-MM-DD'));
dbms_output.put_line(q'[TOMORROW'S : ]'|| to_char(sysdate+1, 'YYYY-MM-DD'));
END;
/


-- [문제2] 전체 사원의 평균 급여를 출력 하는 프로그램 만드세요.  프로그램 수행이 끝난 후에도 전체 사원의 평균값을 이용해서 전체 사원의 평균 급여 보다 많이 받는 사원의 정보 select 문장을 작성하세요.
var b_deptavg number

begin
  select avg(salary) into :b_deptavg from employees;
  dbms_output.put_line('전체 사원의 평균 급여: ' || round(:b_deptavg));
end;
/

select * from employees where salary > :b_deptavg;

/*[문제3] 사원 번호를 입력값으로 받아서 그사원의 사번, 이름, 급여 정보를 출력하는 프로그램을 작성하세요.
<화면 결과>
결과=> 사원번호: 100, 사원이름: King, 사원급여: 24000*/

var b_empid number
exec :b_empid := 100

declare
  v_lname employees.last_name%type;
  v_sal employees.salary%type;

begin
  select last_name, salary into v_lname, v_sal from employees where employee_id = :b_empid;
  dbms_output.put_line('결과=> 사원번호: ' || :b_empid || ', 사원이름: ' || v_lname || ', 사원급여: ' || v_sal);

end;
/

/*[문제4] 사원 번호를 입력값으로 받아서 입사일, 급여 정보를 출력하는 프로그램을 작성하세요.
<화면 결과>
hire date is : 2003년 6월 17일
Salary is : ￦24,000.00 */

-- employee_id 확인 : 100번
select employee_id from employees
where hire_date = to_date('20030617', 'yyyymmdd')
and salary = 24000;

var b_empid number
exec :b_empid := 100

declare
  v_hdate employees.hire_date%type;
  v_sal employees.salary%type;

begin
  select hire_date, salary into v_hdate, v_sal from employees where employee_id = :b_empid;
  dbms_output.put_line('Hire date is : ' || to_char(v_hdate, 'YYYY"년" fmMM"월" DD"일"'));
  dbms_output.put_line('Salary is : ' || ltrim(to_char(v_sal, 'l999g999d00'))); -- to_char의 l 때문에 왼쪽 공백이 생겨 ltrim으로 지워줌
end;
/

/*<문제5> 부서테이블에 신규 부서를 입력하는 프로그램을 작성하려고 합니다.
부서 이름만 입력값으로 받고 부서코드는 마지막 부서 코드에 10을 증가해서 부서코드를
넣고 관리자번호, 부서 위치는 null값으로 입력하는 프로그램을 작성하세요.
화면출력 처럼 출력하세요.(dept 테이블을 생성한후 프로그램을 만드세요) 

<화면출력>
신규 부서 번호는 280, 부서 이름 It 입니다. */

drop table dept purge;
create table dept as select * from departments;

alter table dept add constraint dept_dept_id_pk primary key(department_id);

var b_dname varchar2(10)
exec :b_dname := 'It'

declare
  new_deptid departments.department_id%type;

begin
  select max(department_id)+10 into new_deptid from dept;
  insert into dept(department_id, department_name)
  values(new_deptid, :b_dname);
  dbms_output.put_line('신규 부서 번호는 ' || new_deptid || ', 부서 이름 ' || :b_dname || '입니다.');

end;
/

/*[문제6]사원번호를 입력값으로 받아서 그 사원의 급여를 10%인상하는 프로그램을 수행하세요.
화면의 출력되는 결과는 수정 전 월급과 수정 후 월급이 아래와 같이 출력 후 transaction은 rollback 하세요.
수정 전 월급 : 24000
수정 후 월급 : 26400 */

drop table emp purge;
create table emp as select * from employees;

alter table emp add constraint emp_empid_pk primary key(employee_id);

var b_id number
execute :b_id := 100

declare
  sal emp.salary%type;

begin
  select salary into sal from emp where employee_id = :b_id;
  update emp set salary = salary * 1.1 where employee_id = :b_id;
  if sql%found then
    dbms_output.put_line('수정 전 월급 : ' || sal);
    dbms_output.put_line('수정 후 월급 : ' || (sal * 1.1));
    rollback;
  else
    dbms_output.put_line('수정에 실패했습니다')
  end if;

end;
/


declare
  v_sal emp.salary%type;
  v_name emp.last_name%type;

begin
  select salary into v_sal from emp where employee_id = :b_id;
  dbms_output.put_line('수정 전 월급 : ' || v_sal);
  
  -- returning: DML문장에 fetch기능을 추가함 / 여러 column에 적용 가능 / 1개 row만 적용
  update emp set salary = salary * 1.1 where employee_id = :b_id returning salary, last_name into v_sal, v_name;
  dbms_output.put_line('수정 후 월급 : ' || (v_sal) || '사원이름은 : ' || v_name);
  
  rollback;

end;
/

/*[문제7] 사원번호를 입력값으로 받아서 그 사원을 삭제하는 프로그램을 수행하세요.
화면의 출력되는 결과는 아래와 같이 출력 후 transaction은 rollback 하세요.
(emp 테이블 사용하세요.)
<화면출력>
삭제된 사원의 사원 번호는 100 이고  사원의 이름은 King 입니다. */

var b_id number
execute :b_id := 100

declare
  v_name emp.last_name%type;

begin
  delete from emp where employee_id = :b_id returning last_name into v_name;
  dbms_output.put_line('삭제된 사원의 사원 번호는 ' || :b_id || ' 이고 사원의 이름은 ' || v_name || ' 입니다.');
  rollback;

end;
/
select * from emp where employee_id = 100;

/*[문제8] 부서코드를 입력값으로 받아서 그 부서의 근무하는 사원의 인원수를 출력하시고 
그 부서 사원들의 급여중에 10000 미만인 사원만 10% 인상한 급여로 수정하는 프로그램을 작성하세요.
화면출력한 후 rollback 하세요.(emp 테이블 사용하세요)
<화면출력>
20 부서의 인원수는  2명 입니다.
20 부서의 수정된 ROW의 수는 1 입니다. */

var b_id number
execute :b_id := 20

declare
  v_cnt number;

begin
  select count(*) into v_cnt from emp where department_id = :b_id;
  update emp set salary = salary * 1.1 where department_id = :b_id and salary < 10000;
  dbms_output.put_line(:b_id || ' 부서의 인원수는 ' || v_cnt || '명 입니다.');
  dbms_output.put_line(:b_id || ' 부서의 수정된 ROW의 수는 ' || sql%rowcount || ' 입니다.');
  rollback;
end;
/

/*[문제9] 나이를 입력값으로 받아서 유아, 어린이, 청소년, 성인 출력해주세요
유아 1세 이상 6세 미만
어린이 기준 : 6세 이상 13 미만
청소년 13이상 19세 미만
성인 19세 이상 */
var b_myage number
exec :b_myage := 15

begin 
  if :b_myage >= 1 and :b_myage < 6 then dbms_output.put_line('유아 입니다');
  elsif :b_myage >= 6 and :b_myage < 13 then dbms_output.put_line('어린이 입니다');
  elsif :b_myage >= 13 and :b_myage < 19 then dbms_output.put_line('청소년 입니다');
  elsif :b_myage >= 19 then dbms_output.put_line('성인 입니다');
  else dbms_output.put_line('올바른 나이를 입력해주세요');
  end if;
  
end;
/

-- [문제10] 숫자를 입력값 받아서 짝수 인지 홀수 인지를 출력하는 프로그램을 작성하세요.
var v_a number
execute :v_a := 7

begin
  if mod(:v_a, 2) = 1 then dbms_output.put_line('홀수입니다.');
  elsif mod(:v_a, 2) = 0 then dbms_output.put_line('짝수입니다.');
  else dbms_output.put_line('올바른 숫자를 입력하세요');
  end if;

end;
/

/*[문제11] 급여, 커미션를 입력 값으로 받아서 두값을 더하는 프로그램을 만드세요.
<화면출력>
두 바인드 변수에 값을 입력해주세요
<화면출력>
급여만 입력되었습니다.10000
<화면출력>
커미션만 입력되었습니다.10 
<화면출력>
10010 */
var b_sal number
var b_comm number
exec :b_sal := 10000;
exec :b_comm := 10;

begin
  if :b_comm is null and :b_sal is not null then dbms_output.put_line('급여만 입력되었습니다.' || :b_sal);
  elsif :b_sal is null and :b_comm is not null then dbms_output.put_line('커미션만 입력되었습니다.' || :b_comm);
  elsif :b_sal is not null and :b_comm is not null then dbms_output.put_line(:b_sal + :b_comm);
  else dbms_output.put_line('두 바인드 변수에 값을 입력해주세요.');
  end if;

end;
/

/*[문제12] 두개의 숫자를 입력해서 해당 숫자의 차이값을 출력하세요.
숫자를 어떻게 입력하던 큰 숫자에서 작은 숫자로 빼기를 하세요.*/

var v_a number
var v_b number
execute :v_a := 10
execute :v_b := 7

print v_a v_b

begin
  if :v_a > :v_b then dbms_output.put_line(:v_a - :v_b);
  else dbms_output.put_line(:v_b - :v_a);
  end if;

end;
/

/*[문제13] 사원번호를 입력값으로 받아서 그 사원의 근무개월수를 출력하고 근무개월수가
150개월 이상이면 급여를 20% 인상한 급여로 수정, 
149개월 보다 작거나 같고 100개월 보다 크거나 같으면  10%인상한 급여로 수정,
100개월 미만인 근무자는 아무 작업을 수행하지 않는 프로그램을 작성하세요.
테스트가 끝나면 rollback 합니다.(emp 테이블 사용)
<화면 출력>
100 사원은 근무개월수가 154 입니다. 급여는 20% 수정되었습니다.
<화면 출력>
166 사원은 근무개월수가 97 입니다. 100 개월 미만이므로  급여 수정 안됩니다. */

var b_empid number
exec :b_empid := 100

declare 
  v_wmonth number;
  
begin
  select trunc(months_between(sysdate, hire_date), 0) into v_wmonth from emp where employee_id = :b_empid;
  
  if v_wmonth >= 150 then update emp set salary = salary * 1.2 where employee_id = :b_empid; dbms_output.put_line(:b_empid || '사원은 근무개월수가 ' || v_wmonth || '입니다. 급여가 20% 인상되었습니다.');
  elsif v_wmonth between 100 and 149 then update emp set salary = salary * 1.1 where employee_id = :b_empid; dbms_output.put_line(:b_empid || '사원은 근무개월수가 ' || v_wmonth || '입니다. 급여가 10% 인상되었습니다.');
  else dbms_output.put_line(:b_empid || '사원은 근무개월수가 ' || v_wmonth || '입니다. 100개월 미만이므로 급여 변동이 없습니다.');
  end if;
    
  rollback;
  
end;
/

-- 문제 14번 : 문제13번을 case문으로 해결하시오
declare 
  v_wmonth number;
  
begin
  select trunc(months_between(sysdate, hire_date), 0) into v_wmonth from emp where employee_id = :b_empid;
  
  case
  when v_wmonth >= 150 then update emp set salary = salary * 1.2 where employee_id = :b_empid; dbms_output.put_line(:b_empid || '사원은 근무개월수가 ' || v_wmonth || '입니다. 급여가 20% 인상되었습니다.');
  when v_wmonth between 100 and 149 then update emp set salary = salary * 1.1 where employee_id = :b_empid; dbms_output.put_line(:b_empid || '사원은 근무개월수가 ' || v_wmonth || '입니다. 급여가 10% 인상되었습니다.');
  else dbms_output.put_line(:b_empid || '사원은 근무개월수가 ' || v_wmonth || '입니다. 100개월 미만이므로 급여 변동이 없습니다.');
  end case;
    
  rollback;
  
end;
/

/*[문제15] 화면의 숫자 1 부터 10 까지 출력하는 프로그램을 작성합니다. 단 4,8번은 출력하지 마세요.
<화면출력>
1
2
3
5
6
7
9
10 */
-- if문
declare
  i number := 1;

begin
  loop 
    if i >= 1 and i <= 10 and i != 4 and i != 8 then dbms_output.put_line(i);
    elsif i > 10 then exit;
    end if;
    i := i + 1;
  end loop;

end;
/

declare
  i number := 1;

begin
  loop 
    if i = 4 or i = 8 then null;
    else dbms_output.put_line(i);
    end if;
    i := i + 1;
    exit when i > 10;
  end loop;

end;
/

-- while문
declare
  i number := 1;
  
begin
  while i <= 11 loop
    if i >= 1 and i <= 10 and i != 4 and i != 8 then dbms_output.put_line(i);
    elsif i > 10 then exit;
    end if;
    i := i + 1;
  end loop;

end;
/

-- for문
begin
  for i in 1..10 loop
    if i >= 1 and i <= 10 and i != 4 and i != 8 then dbms_output.put_line(i);
    end if;
  end loop;

end;
/

begin 
  for i in 1..10 loop
    if i = 4 or i = 8 then null;
    else dbms_output.put_line(i);
    end if;
  end loop;

end;
/

begin 
  for i in 1..10 loop
    if i != 4 and i != 8 then dbms_output.put_line(i);
    end if;
  end loop;

end;
/


--[문제16] 1번부터 100까지 짝수만 출력하세요.(기본 loop, while loop, for loop)
--loop
declare
  i number := 1;

begin
  loop
    if mod(i, 2) = 0 then dbms_output.put_line(i);
    elsif i > 100 then exit;
    end if;
    i := i + 1;
  end loop;

end;
/

-- while
declare
  i number := 1;

begin
  while i <= 100 loop
    if mod(i, 2) = 0 then dbms_output.put_line(i);
    end if;
    i := i + 1;
  end loop;

end;
/

-- for
begin
  for i in 1 .. 100 loop
    if mod(i, 2) = 0 then dbms_output.put_line(i);
    end if;
  end loop;

end;
/

-- [문제17] 1번부터 100까지 홀수만 출력하세요.
--loop
declare
  i number := 1;

begin
  loop
    if i > 100 then exit;
    elsif mod(i, 2) = 1 then dbms_output.put_line(i); 
    end if;
    i := i + 1;
  end loop;

end;
/

-- while
declare
  i number := 1;

begin
  while i <= 100 loop
    if mod(i, 2) = 1 then dbms_output.put_line(i);
    end if;
    i := i + 1;
  end loop;

end;
/

-- for
begin
  for i in 1 .. 100 loop
    if mod(i, 2) = 1 then dbms_output.put_line(i);
    end if;
  end loop;

end;
/

/*[문제18] 구구단 2단 출력하는 프로그램을 작성하세요.
2 * 1 = 2
2 * 2 = 4
2 * 3 = 6
2 * 4 = 8
2 * 5 = 10
2 * 6 = 12
2 * 7 = 14
2 * 8 = 16
2 * 9 = 18*/

declare
  v_dan number := 2;

begin
  for i in 1..9 loop
    dbms_output.put_line(v_dan || ' * ' || i || ' = ' || v_dan * i);
  end loop;

end;
/

-- [문제19] 단을 입력값으로 받아서 그 단에 대해서만 출력하시고 만약에 단 입력값이 없으면 전체 구구단이 출력되도록 작성하세요.
var b_dan number
execute :b_dan := 2
execute :b_dan := null

begin
  if :b_dan is not null then
    dbms_output.put_line('구구단 ' || :b_dan || '단입니다.');
    for i in 1..9 loop
      dbms_output.put_line(:b_dan || ' * ' || i || ' = ' || :b_dan * i);
    end loop;
  else
    for i in 2..9 loop
    dbms_output.put_line('구구단 ' || i || '단입니다.');
      for j in 1..9 loop
        dbms_output.put_line(i || ' * ' || j || ' = ' || i * j);
      end loop;
    dbms_output.put_line('');
    end loop;
  end if;
end;
/

/*[문제20] 사원 테이블의 employee_id, last_name 을 출력하는 프로그램입니다.
       사원번호는 100번 부터 해서 5씩 증가한 정보를 출력하시고 120번으로 끝내도록 해주세요.
<화면 출력>
100  King
105  Austin
110  Chen
115  khoo
120  Weiss */

declare
  v_empid number := 100;
  v_lname employees.last_name%type;

begin
  while v_empid <= 120 loop
    select last_name into v_lname from employees where employee_id = v_empid;
    dbms_output.put_line(v_empid || '번 사원의 이름은 ' || v_lname || '입니다.');
    v_empid := v_empid + 5;
  end loop;

end;
/

/*[문제21] 사원 번호를 입력 값으로 받아서 그 사원의 급여를 출력하는 프로그램을 작성합니다. 
또한 급여 1000당 별(*) 하나를 출력해주세요.(반복문을 이용하세요)
<화면출력>
employee_id => 200  salary => 4400
star is => ****     */

-- 반복문 활용
var b_empid number;
exec :b_empid := 200;
declare 
  v_sal employees.salary%type;
  v_star varchar2(10) := '';
  
begin
  select salary into v_sal from employees where employee_id = :b_empid;
  dbms_output.put_line('employee_id => ' || :b_empid || ' salary => ' || v_sal);
  
  for i in 1..trunc(v_sal/1000) loop
    v_star := v_star || '*';
  end loop;
  dbms_output.put_line('star is => ' || v_star);
  
end;
/

--substr활용
var b_empid number;
exec :b_empid := 200;
declare 
  v_sal employees.salary%type;
  v_star varchar2(10) := '**********';

begin
  select salary into v_sal from employees where employee_id = :b_empid;
  dbms_output.put_line('employee_id => ' || :b_empid || ' salary => ' || v_sal);
  dbms_output.put_line('star is => ' || substr(v_star, 0, trunc(v_sal/1000)));
  
end;
/

-- rpad활용
var b_empid number;
exec :b_empid := 200;
declare 
  v_sal employees.salary%type;

begin
  select salary into v_sal from employees where employee_id = :b_empid;
  dbms_output.put_line('employee_id => ' || :b_empid || ' salary => ' || v_sal);
  dbms_output.put_line('star is =>' || rpad(' ', trunc(v_sal/1000)+1, '*'));
  
end;
/

-- put 활용
var b_empid number;
exec :b_empid := 200;
declare 
  v_sal employees.salary%type;
  
begin
  select salary into v_sal from employees where employee_id = :b_empid;
  dbms_output.put_line('employee_id => ' || :b_empid || ' salary => ' || v_sal);
  
  for i in 1..trunc(v_sal/1000) loop
    dbms_output.put('*'); -- 출력내용을 쌓아두는 명령
  end loop;
  dbms_output.new_line; -- 쌓인 내용을 출력하는 명령
  
end;
/

/* 22번 문제: continue문을 사용하지 않고 같은 기능을 구현하기
declare
  v_total number := 0;

begin
  for i in 1..10 loop
    v_total := v_total + i;
    dbms_output.put_line('Total is : ' || v_total);
    continue when i > 5; --11g에서 등장
    v_total := v_total + i;
    dbms_output.put_line('Out of loop total is : ' || v_total);
  end loop;
  
end;
/  */
-- if문 활용
declare
  v_total number := 0;

begin
  for i in 1..10 loop
    v_total := v_total + i;
    dbms_output.put_line('Total is : ' || v_total);
    if i <= 5 then
      v_total := v_total + i;
      dbms_output.put_line('Out of loop total is : ' || v_total);
    end if;
  end loop;
  
end;
/
-- sub loop 활용
declare
  v_total number := 0;

begin
  for i in 1..10 loop
    v_total := v_total + i;
    dbms_output.put_line('Total is : ' || v_total);
    loop
      exit when i > 5
      v_total := v_total + i;
      dbms_output.put_line('Out of loop total is : ' || v_total);
      exit;
    end loop;
  end loop;
  
end;
/

/* 문제 23 continue문을 쓰지 않고 
declare
  v_total number := 0;
  
begin
  <<toploop>>
  for i in 1..10 loop
    v_total := v_total + i;
    dbms_output.put_line('Total is : ' || v_total);
    for j in 1..10 loop
      continue toploop when i+j > 5; -- continue문의 활용: 돌아갈 loop문을 지정할 수 있음
      v_total := v_total + i;
      dbms_output.put_line(v_total);
    end loop;
  end loop;

end;
/  */
-- exit when 활용
declare
  v_total number := 0;
  
begin
  <<toploop>>
  for i in 1..10 loop
    v_total := v_total + i;
    dbms_output.put_line('Total is : ' || v_total);
    for j in 1..10 loop
      exit when i+j > 5;
      v_total := v_total + i;
      dbms_output.put_line(v_total);
    end loop;
  end loop;

end;
/

-- [문제24]구구단 2단을 for loop를 이용해서 출력하세요. 단 2 * 6은 제외 시켜주세요.
-- if 활용
begin
  for i in 1..9 loop
    if i != 6 then
      dbms_output.put_line('2 * ' || i || ' = ' || 2*i);
    end if;
  end loop;

end;
/

-- continue 활용
begin
  for i in 1..9 loop
    continue when i = 6;
    dbms_output.put_line('2 * ' || i || ' = ' || 2*i);
  end loop;

end;
/

/*[문제25] 배열 변수에 있는 100,101,102,103,104, 200 사원들의 근무한 개월수를 출력하고 근무개월수가 150개월이상 되었으면 급여(salary)를 10% 인상한 급여로 수정하는 프로그램 작성하세요.
<출력 결과>
100는 근무개월수가 166 입니다. 급여는 10% 인상되었습니다.
101는 근무개월수가 139 입니다. 급여는 인상할 수 없습니다.
102는 근무개월수가 195 입니다. 급여는 10% 인상되었습니다.
103는 근무개월수가 135 입니다. 급여는 인상할 수 없습니다.
104는 근무개월수가 119 입니다. 급여는 인상할 수 없습니다.
200는 근무개월수가 163 입니다. 급여는 10% 인상되었습니다. */

declare 
  type empid_type is table of number index by binary_integer;
  v_empid empid_type;
  v_wmonth number;

begin
  v_empid(1) := 100;
  v_empid(2) := 101;
  v_empid(3) := 102;
  v_empid(4) := 103;
  v_empid(5) := 104;
  v_empid(6) := 200;
  for i in v_empid.first..v_empid.last loop
    select trunc(months_between(sysdate, hire_date)) into v_wmonth from emp where employee_id = v_empid(i);
    if v_wmonth >= 150 then
      update emp set salary = salary * 1.1 where employee_id = v_empid(i);
      dbms_output.put_line(v_empid(i) || '는 근무개월수가 ' || v_wmonth || '입니다. 급여는 10% 인상되었습니다.');
    else
      dbms_output.put_line(v_empid(i) || '는 근무개월수가 ' || v_wmonth || '입니다. 급여는 인상할 수 없습니다.');
    end if;
  end loop;
  rollback;
end;
/

/*[문제26] 배열변수안에 있는 사원 번호 값을 기준으로 (100,110,200) 
그 사원의 last_name, hire_date, department_name 정보를 배열변수에 담아놓은 후 
화면에 출력하는 프로그램을 작성하세요.
<화면결과>
100 사원의 이름은 King, 입사한 날짜는 2003-06-17, 근무 부서이름은 Executive 입니다.
110 사원의 이름은 Chen, 입사한 날짜는 2005-09-28, 근무 부서이름은 Finance 입니다.
200 사원의 이름은 whalen, 입사한 날짜는 2003-09-17, 근무 부서이름은 administration 입니다. */

declare 
  type rec_type is record(id number, last_name employees.last_name%type, hire_date employees.hire_date%type, department_name departments.department_name%type);
  type tab_type is table of rec_type index by pls_integer;
  v_tab tab_type;
begin
  v_tab(1).id := 100;
  v_tab(2).id := 110;
  v_tab(3).id := 200;
  for i in v_tab.first..v_tab.last loop
    select e.last_name, e.hire_date, d.department_name into v_tab(i).last_name, v_tab(i).hire_date, v_tab(i).department_name from emp e, departments d where e.department_id = d.department_id and employee_id = v_tab(i).id;
    dbms_output.put_line(v_tab(i).id || '사원의 이름은 ' || v_tab(i).last_name || ', 입사한 날짜는 ' || to_char(v_tab(i).hire_date, 'yyyy-mm-dd') || ', 근무 부서이름은 ' || v_tab(i).department_name || '입니다.');
  end loop;

end;
/